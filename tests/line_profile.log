2015-12-13 13:51:18,629 fleure: [INFO] 5bde384b: 初期化を開始: root=/tmp/fleure-tests-xDptVW, backend=dnf
2015-12-13 13:52:12,413 fleure: [INFO] 5bde384b[dnf]: 初期化を完了、解析を開始 ...
2015-12-13 13:52:37,119 fleure: [INFO] 5bde384b: 416 個 (rebuilt=0, replaced=1) のインストール RPM を発見
2015-12-13 13:52:37,390 fleure: [INFO] ホストを解析: 5bde384b
2015-12-13 13:52:37,392 fleure: [INFO] 5bde384b: エラータとパッケージを解析中 ...
2015-12-13 13:52:45,271 fleure: [INFO] 5bde384b: 495 個のエラータと 251 個の更新 RPM を発見、一覧を保存
2015-12-13 13:52:52,432 fleure: [INFO] 5bde384b: エラータとパッケージ [期間 20150101 ~ 20151112] を解析中
2015-12-13 13:52:52,432 fleure: [DEBUG] 5bde384b: 指定期間データの作業用ディレクトリ /tmp/fleure-tests-xDptVW/20150101_20151112 を作成
2015-12-13 13:52:55,461 fleure: [INFO] 5bde384b [20150101 ~ 20151112]: 195 個のエラータを発見、一覧を保存
2015-12-13 13:52:55,522 fleure: [INFO] 解析結果をアーカイブしました: /tmp/fleure-tests-xDptVW/report-5bde384b-2015-12-13.zip
Timer unit: 1e-06 s

Total time: 0.000356 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_latest_errata_by_updates at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                           def list_latest_errata_by_updates(ers):
    31                                               """
    32                                               :param ers: A list of errata namedtuples
    33                                               :return: A list of items in `ers` grouped by update names
    34                                               """
    35                                               # see :func:`fleure.errata.factory`
    36         6            5      0.8      1.4      kfns = (attrgetter("update_names"), attrgetter("issue_date"))
    37        48          351      7.3     98.6      return [xs[-1] for xs in fleure.utils.sgroupby(ers, *kfns)]

Total time: 0.011978 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_from_errata at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           def list_updates_from_errata(ers):
    41                                               """
    42                                               :param ers: A list of errata namedtuples
    43                                           
    44                                               >>> from collections import namedtuple
    45                                               >>> from fleure.globals import NEVRA
    46                                               >>> errata = namedtuple("errata", "advisory updates")
    47                                               >>> ers = [errata("RHSA-2015:XXX1",
    48                                               ...               [NEVRA("kernel", 0, "2.6.32", "573.8.1.el6", "x86_64"),
    49                                               ...                NEVRA("tzdata", 0, "2015g", "2.el6", "noarch")]),
    50                                               ...        errata("RHSA-2014:XXX2",
    51                                               ...               [NEVRA("glibc", 0, "2.12", "1.166.el6_7.3", "x86_64"),
    52                                               ...                NEVRA("tzdata", 0, "2015g", "11.el6", "noarch")])]
    53                                               >>> ups = [tuple(u) for u in list_updates_from_errata(ers)]
    54                                               >>> ups  # doctest: +NORMALIZE_WHITESPACE
    55                                               [('glibc', 0, '2.12', '1.166.el6_7.3', 'x86_64'),
    56                                                ('kernel', 0, '2.6.32', '573.8.1.el6', 'x86_64'),
    57                                                ('tzdata', 0, '2015g', '11.el6', 'noarch')]
    58                                               """
    59         6         6227   1037.8     52.0      ups = sorted(fleure.utils.uconcat(e.updates for e in ers),
    60         6          315     52.5      2.6                   key=attrgetter("name"))
    61         6            3      0.5      0.0      return [sorted(g, cmp=fleure.rpmutils.pcmp2, reverse=True)[0] for g
    62       457         5433     11.9     45.4              in fleure.utils.sgroupby(ups, attrgetter("name"))]

Total time: 2.33595 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: errata_of_keywords_g at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                           def errata_of_keywords_g(ers, keywords=fleure.globals.ERRATA_KEYWORDS,
    79                                                                    stemming=True):
    80                                               """
    81                                               :param ers: A list of errata
    82                                               :param keywords: Keyword list to filter 'important' RHBAs
    83                                               :param stemming: Strict matching of keywords with using NLTK stemmer
    84                                               :return:
    85                                                   A generator to yield errata of which description contains any of
    86                                                   given keywords
    87                                           
    88                                               >>> from collections import namedtuple
    89                                               >>> errata = namedtuple("errata", "advisory description extras")
    90                                               >>> ers = [errata("RHSA-2015:XXX1", "system hangs, or crash...",
    91                                               ...               {"keywords": []}),
    92                                               ...        errata("RHEA-2015:XXX2", "some enhancement and changes",
    93                                               ...               {"keywords": []})]
    94                                               >>> ret = list(errata_of_keywords_g(ers, ("hang", ), True))
    95                                               >>> ers[0] in ret
    96                                               True
    97                                               >>> ers[0].extras["keywords"]  # 'hangs' matches with stemming.
    98                                               ['hang']
    99                                               >>> ret2 = list(errata_of_keywords_g(ers, ("hang", "crash"),
   100                                               ...                                  stemming=False))
   101                                               >>> ers[0] in ret2
   102                                               True
   103                                               >>> ers[0].extras["keywords"]  # 'hangs' does not match with 'hang'.
   104                                               ['crash']
   105                                               >>> ers[1] in ret2
   106                                               False
   107                                               """
   108         2            5      2.5      0.0      stemmer = _STEMMER.stem if stemming else None
   109       492          227      0.5      0.0      for ert in ers:
   110       490      2333595   4762.4     99.9          tokens = tokenize(ert.description, stemmer)
   111      3430         1762      0.5      0.1          mks = [k for k in keywords if k in tokens]
   112       490          201      0.4      0.0          if mks:
   113        92          129      1.4      0.0              ert.extras["keywords"] = mks
   114        92           35      0.4      0.0              yield ert

Total time: 0.060055 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_update_errata_pairs at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                           def list_update_errata_pairs(ers):
   139                                               """
   140                                               :param ers: A list of errata namedtuples
   141                                               :return: A list of (update_name, [errata_advisory])
   142                                           
   143                                               >>> from collections import namedtuple
   144                                               >>> errata = namedtuple("errata", "advisory update_names")
   145                                               >>> ers = [errata("RHSA-2015:XXX1", ["kernel", "tzdata"]),
   146                                               ...        errata("RHSA-2014:XXX2", ["glibc", "tzdata"])]
   147                                               >>> list_update_errata_pairs(ers)  # doctest: +NORMALIZE_WHITESPACE
   148                                               [('glibc', ['RHSA-2014:XXX2']),
   149                                                ('kernel', ['RHSA-2015:XXX1']),
   150                                                ('tzdata', ['RHSA-2015:XXX1', 'RHSA-2014:XXX2'])]
   151                                               """
   152        10           15      1.5      0.0      ues = fleure.utils.uconcat([(u, e.advisory) for u in e.update_names]
   153        10        54776   5477.6     91.2                                 for e in ers)
   154        10            9      0.9      0.0      return [(u, sorted((t[1] for t in g), reverse=True)) for u, g
   155      1230         5255      4.3      8.8              in itertools.groupby(ues, operator.itemgetter(0))]

Total time: 0.000773 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_by_num_of_errata at line 158

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   158                                           def list_updates_by_num_of_errata(uess):
   159                                               """
   160                                               List number of specific type of errata for each package names.
   161                                           
   162                                               :param uess: A list of (update, [errata_advisory]) pairs
   163                                               :return: [(package_name :: str, num_of_relevant_errata :: Int)]
   164                                           
   165                                               >>> from collections import namedtuple
   166                                               >>> errata = namedtuple("errata", "advisory update_names")
   167                                               >>> ers = [errata("RHSA-2015:1623", ['kernel-headers', 'kernel']),
   168                                               ...        errata("RHSA-2015:1513", ['bind-utils']),
   169                                               ...        errata("RHSA-2015:1081", ['kernel-headers', 'kernel'])]
   170                                               >>> list_updates_by_num_of_errata(list_update_errata_pairs(ers))
   171                                               [('kernel', 2), ('kernel-headers', 2), ('bind-utils', 1)]
   172                                               >>>
   173                                               """
   174         8            9      1.1      1.2      return sorted(((u, len(es)) for u, es in uess),
   175         8          764     95.5     98.8                    key=operator.itemgetter(1), reverse=True)

Total time: 0.019113 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhsa at line 178

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   178                                           def analyze_rhsa(rhsa):
   179                                               """
   180                                               Compute and return statistics of RHSAs from some view points.
   181                                           
   182                                               :param rhsa: A list of security errata (RHSA) namedtuples
   183                                               :return: RHSA analized data and metrics
   184                                               """
   185         2            4      2.0      0.0      _ls_by_sev = lambda sev: [e for e in rhsa if e.severity == sev]
   186                                           
   187         2          126     63.0      0.7      cri_rhsa = _ls_by_sev("Critical")  # TODO: Define consts.
   188         2           69     34.5      0.4      imp_rhsa = _ls_by_sev("Important")
   189         2            3      1.5      0.0      rate_by_sev = [("Critical", len(cri_rhsa)), ("Important", len(imp_rhsa)),
   190         2           66     33.0      0.3                     ("Moderate", len(_ls_by_sev("Moderate"))),
   191         2           59     29.5      0.3                     ("Low", len(_ls_by_sev("Low")))]
   192                                           
   193         2        10204   5102.0     53.4      rhsa_ues = list_update_errata_pairs(rhsa)
   194         2            2      1.0      0.0      _ups_by_nes = lambda ers: \
   195                                                   list_updates_by_num_of_errata(list_update_errata_pairs(ers))
   196                                           
   197         2           14      7.0      0.1      return {'list': rhsa,
   198         2            2      1.0      0.0              'list_critical': cri_rhsa,
   199         2            2      1.0      0.0              'list_important': imp_rhsa,
   200         2           74     37.0      0.4              'list_latest_critical': list_latest_errata_by_updates(cri_rhsa),
   201         2          228    114.0      1.2              'list_latest_important': list_latest_errata_by_updates(imp_rhsa),
   202         2          507    253.5      2.7              'list_critical_updates': list_updates_from_errata(cri_rhsa),
   203         2         5055   2527.5     26.4              'list_important_updates': list_updates_from_errata(imp_rhsa),
   204         2            1      0.5      0.0              'rate_by_sev': rate_by_sev,
   205         2          175     87.5      0.9              'list_n_by_pnames': list_updates_by_num_of_errata(rhsa_ues),
   206         2          251    125.5      1.3              'list_n_cri_by_pnames': _ups_by_nes(cri_rhsa),
   207         2         2269   1134.5     11.9              'list_n_imp_by_pnames': _ups_by_nes(imp_rhsa),
   208         2            2      1.0      0.0              'list_by_packages': rhsa_ues}

Total time: 2.39709 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhba at line 211

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   211                                           def analyze_rhba(rhba, keywords=fleure.globals.ERRATA_KEYWORDS,
   212                                                            core_rpms=fleure.globals.CORE_RPMS):
   213                                               """
   214                                               Compute and return statistics of RHBAs from some view points.
   215                                           
   216                                               :param rhba: A list of bug errata (RHBA) namedtuples
   217                                               :param keywords: Keyword list to filter 'important' RHBAs
   218                                               :param core_rpms: Core RPMs to filter errata by them
   219                                               :return: RHSA analized data and metrics
   220                                               """
   221         2            2      1.0      0.0      kfn = lambda e: (len(e.extras.get("keywords", [])), e.issue_date,
   222                                                                e.update_names)
   223         2            4      2.0      0.0      rhba_by_kwds = sorted(errata_of_keywords_g(rhba, keywords),
   224         2      2338379 1169189.5     97.6                            key=kfn, reverse=True)
   225                                               rhba_of_core_rpms_by_kwds = \
   226         2            4      2.0      0.0          sorted(errata_of_rpms_g(rhba_by_kwds, core_rpms),
   227         2          571    285.5      0.0                 key=kfn, reverse=True)
   228         2            2      1.0      0.0      rhba_of_rpms = sorted(errata_of_rpms_g(rhba, core_rpms),
   229         2         2902   1451.0      0.1                            key=attrgetter("update_names"), reverse=True)
   230         2           98     49.0      0.0      latest_rhba_of_rpms = list_latest_errata_by_updates(rhba_of_rpms)
   231         2        47865  23932.5      2.0      rhba_ues = list_update_errata_pairs(rhba)
   232                                           
   233         2            6      3.0      0.0      return {'list': rhba,
   234         2            2      1.0      0.0              'list_by_kwds': rhba_by_kwds,
   235         2            1      0.5      0.0              'list_of_core_rpms': rhba_of_rpms,
   236         2            2      1.0      0.0              'list_latests_of_core_rpms': latest_rhba_of_rpms,
   237         2            1      0.5      0.0              'list_by_kwds_of_core_rpms': rhba_of_core_rpms_by_kwds,
   238         2         6734   3367.0      0.3              'list_updates_by_kwds': list_updates_from_errata(rhba_by_kwds),
   239         2          515    257.5      0.0              'list_n_by_pnames': list_updates_by_num_of_errata(rhba_ues),
   240         2            2      1.0      0.0              'list_by_packages': rhba_ues}

Total time: 2.41893 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_errata at line 285

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   285                                           def analyze_errata(ers, score=fleure.globals.CVSS_MIN_SCORE,
   286                                                              keywords=fleure.globals.ERRATA_KEYWORDS,
   287                                                              core_rpms=fleure.globals.CORE_RPMS):
   288                                               """
   289                                               :param ers:
   290                                                   a list of applicable errata (namedtuple) sorted by severity if it's
   291                                                   RHSA and advisory in ascending sequence
   292                                               :param score: CVSS base metrics score
   293                                               :param keywords: Keyword list to filter 'important' RHBAs
   294                                               :param core_rpms: Core RPMs to filter errata by them
   295                                               """
   296       692          826      1.2      0.0      rhsa = [e for e in ers if e.type == 'security']  # TODO: defines consts.
   297       692          572      0.8      0.0      rhba = [e for e in ers if e.type == 'bugfix']
   298       692          522      0.8      0.0      rhea = [e for e in ers if e.type == 'enhancement']
   299         2            3      1.5      0.0      assert len(rhsa) + len(rhba) + len(rhea) == len(ers)  # To be removed.
   300                                           
   301         2        19174   9587.0      0.8      rhsa_data = analyze_rhsa(rhsa)
   302         2      2397131 1198565.5     99.1      rhba_data = analyze_rhba(rhba, keywords, core_rpms)
   303                                           
   304         2            0      0.0      0.0      if score > 0:
   305                                                   rhba_by_score = list(higher_score_cve_errata_g(rhba, score))
   306                                                   us_of_rhba_by_score = list_updates_from_errata(rhba_by_score)
   307                                               else:
   308         2            2      1.0      0.0          rhsa_by_score = []
   309         2            0      0.0      0.0          rhba_by_score = []
   310         2            2      1.0      0.0          us_of_rhsa_by_score = []
   311         2            2      1.0      0.0          us_of_rhba_by_score = []
   312                                           
   313         2            0      0.0      0.0      rhsa_data["list_higher_cvss_score"] = rhsa_by_score
   314         2            2      1.0      0.0      rhba_data["list_higher_cvss_score"] = rhba_by_score
   315         2            0      0.0      0.0      rhsa_data["list_higher_cvss_updates"] = us_of_rhsa_by_score
   316         2            2      1.0      0.0      rhba_data["list_higher_cvss_updates"] = us_of_rhba_by_score
   317                                           
   318         2            2      1.0      0.0      return dict(rhsa=rhsa_data,
   319         2            1      0.5      0.0                  rhba=rhba_data,
   320         2            2      1.0      0.0                  rhea=dict(list=rhea,
   321         2          680    340.0      0.0                            list_by_packages=list_update_errata_pairs(rhea)),
   322         2            2      1.0      0.0                  rate_by_type=[("Security", len(rhsa)),
   323         2            0      0.0      0.0                                ("Bug", len(rhba)),
   324         2            4      2.0      0.0                                ("Enhancement", len(rhea))])

Total time: 0.001097 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: mk_overview_dataset at line 339

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   339                                           def mk_overview_dataset(data, score=fleure.globals.CVSS_MIN_SCORE,
   340                                                                   keywords=fleure.globals.ERRATA_KEYWORDS,
   341                                                                   core_rpms=None):
   342                                               """
   343                                               :param data: RPMs, Update RPMs and various errata data summarized
   344                                               :param score: CVSS base metrics score limit
   345                                               :param core_rpms: Core RPMs to filter errata by them
   346                                           
   347                                               :return: An instance of tablib.Dataset becomes a worksheet represents the
   348                                                   overview of analysys reuslts
   349                                               """
   350         2            6      3.0      0.5      rows = [[_("Critical or Important RHSAs (Security Errata)")],
   351         2           10      5.0      0.9              [_("# of Critical RHSAs"),
   352         2            6      3.0      0.5               len(data["errata"]["rhsa"]["list_critical"])],
   353         2            6      3.0      0.5              [_("# of Critical RHSAs (latests only)"),
   354         2            2      1.0      0.2               len(data["errata"]["rhsa"]["list_latest_critical"])],
   355         2            6      3.0      0.5              [_("# of Important RHSAs"),
   356         2            2      1.0      0.2               len(data["errata"]["rhsa"]["list_important"])],
   357         2            5      2.5      0.5              [_("# of Important RHSAs (latests only)"),
   358         2            4      2.0      0.4               len(data["errata"]["rhsa"]["list_latest_important"])],
   359         2            7      3.5      0.6              [_("Update RPMs by Critical or Important RHSAs at minimum")],
   360         2            6      3.0      0.5              [_("# of Update RPMs by Critical RHSAs at minimum"),
   361         2            2      1.0      0.2               len(data["errata"]["rhsa"]["list_critical_updates"])],
   362         2            6      3.0      0.5              [_("# of Update RPMs by Important RHSAs at minimum"),
   363         2            2      1.0      0.2               len(data["errata"]["rhsa"]["list_important_updates"])],
   364         2            1      0.5      0.1              [],
   365         2          134     67.0     12.2              [_("RHBAs (Bug Errata) by keywords: %s") % ", ".join(keywords)],
   366         2            6      3.0      0.5              [_("# of RHBAs by keywords"),
   367         2            3      1.5      0.3               len(data["errata"]["rhba"]["list_by_kwds"])],
   368         2            5      2.5      0.5              [_("# of Update RPMs by RHBAs by keywords at minimum"),
   369         2            2      1.0      0.2               len(data["errata"]["rhba"]["list_updates_by_kwds"])]]
   370                                           
   371         2            2      1.0      0.2      if core_rpms is not None:
   372         2            2      1.0      0.2          rows += [[],
   373         2           11      5.5      1.0                   [_("RHBAs of core rpms: %s") % ", ".join(core_rpms)],
   374         2            5      2.5      0.5                   [_("# of RHBAs of core rpms (latests only)"),
   375         2            5      2.5      0.5                    len(data["errata"]["rhba"]["list_latests_of_core_rpms"])]]
   376                                           
   377         2            3      1.5      0.3      if score > 0:
   378                                                   rows += [[],
   379                                                            [_("RHSAs and RHBAs by CVSS score")],
   380                                                            [_("# of RHSAs of CVSS Score >= %.1f") % score,
   381                                                             len(data["errata"]["rhsa"]["list_higher_cvss_score"])],
   382                                                            [_("# of Update RPMs by the above RHSAs at minimum"),
   383                                                             len(data["errata"]["rhsa"]["list_higher_cvss_updates"])],
   384                                                            [_("# of RHBAs of CVSS Score >= %.1f") % score,
   385                                                             len(data["errata"]["rhba"]["list_higher_cvss_score"])],
   386                                                            [_("# of Update RPMs by the above RHBAs at minimum"),
   387                                                             len(data["errata"]["rhba"]["list_higher_cvss_updates"])]]
   388                                           
   389         2            2      1.0      0.2      rows += [[],
   390         2            7      3.5      0.6               [_("# of RHSAs"), len(data["errata"]["rhsa"]["list"])],
   391         2            5      2.5      0.5               [_("# of RHBAs"), len(data["errata"]["rhba"]["list"])],
   392         2            5      2.5      0.5               [_("# of RHEAs (Enhancement Errata)"),
   393         2            4      2.0      0.4                len(data["errata"]["rhea"]["list"])],
   394         2            5      2.5      0.5               [_("# of Update RPMs"), len(data["updates"]["list"])],
   395         2            5      2.5      0.5               [_("# of Installed RPMs"), len(data["installed"]["list"])],
   396         2            1      0.5      0.1               [],
   397         2            4      2.0      0.4               [_("Origin of Installed RPMs")],
   398         2            4      2.0      0.4               [_("# of Rebuilt RPMs"), len(data["installed"]["list_rebuilt"])],
   399         2            4      2.0      0.4               [_("# of Replaced RPMs"),
   400         2            3      1.5      0.3                len(data["installed"]["list_replaced"])],
   401         2            8      4.0      0.7               [_("# of RPMs from other vendors (non Red Hat)"),
   402         2            4      2.0      0.4                len(data["installed"]["list_from_others"])]]
   403                                           
   404         2           11      5.5      1.0      headers = (_("Item"), _("Value"), _("Notes"))
   405         2          174     87.0     15.9      dataset = tablib.Dataset(headers=headers)
   406         2            9      4.5      0.8      dataset.title = _("Overview of analysis results")
   407                                           
   408         2            3      1.5      0.3      mcols = len(headers)
   409        54           49      0.9      4.5      for row in rows:
   410        52           54      1.0      4.9          if row and len(row) == 1:  # Special case: separator
   411        10           53      5.3      4.8              dataset.append_separator(row[0])
   412                                                   else:
   413        42          432     10.3     39.4              dataset.append(padding_row(row, mcols))
   414                                           
   415         2            2      1.0      0.2      return dataset

Total time: 0.267197 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/datasets.py
Function: make_dataset at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                           def make_dataset(list_data, title=None, headers=None, lheaders=None):
    78                                               """
    79                                               :param list_data: List of data, may be consists of [[namedtuple]]
    80                                               :param title: Dataset title to be used as worksheet's name
    81                                               :param headers: Dataset headers to be used as column headers, etc.
    82                                               :param lheaders: Localized version of `headers`
    83                                           
    84                                               TODO: Which is better?
    85                                                   - tablib.Dataset(); [tablib.append(vals) for vals in list_data]
    86                                                   - tablib.Dataset(*list_data, header=...)
    87                                               """
    88                                               # .. note::
    89                                               #    We need to check title as valid worksheet name, length <= 31, etc.
    90                                               #    See also xlwt.Utils.valid_sheet_name.
    91        26           12      0.5      0.0      if headers is not None:
    92        26           11      0.4      0.0          tdata = [[_make_cell_data(val, h) for h in headers] for val
    93     27104       157339      5.8     58.9                   in list_data]
    94        26           11      0.4      0.0          headers = headers if lheaders is None else lheaders
    95                                               else:
    96                                                   tdata = [val.values() for val in list_data]
    97                                           
    98        26       109824   4224.0     41.1      return tablib.Dataset(*tdata, title=title[:30], headers=headers)

Total time: 102.27 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/decorators.py
Function: decorated at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               @functools.wraps(fnc)
    40                                               def decorated(*args, **kwargs):
    41                                                   """Decorated one"""
    42         3    102270417 34090139.0    100.0          return fnc(*args, **kwargs)

Total time: 10.1558 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: analyze_and_save_results at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                           def analyze_and_save_results(host, errata, updates, savedir=None):
    45                                               """
    46                                               Dump package level static analysis results.
    47                                           
    48                                               :param host: host object function :function:`prepare` returns
    49                                               :param errata: A list of errata :: [namedtuple]
    50                                               :param updates: A list of update RPMs (latest only) :: [namedtuple]
    51                                               :param savedir: Dir to save results
    52                                               """
    53         2            6      3.0      0.0      if savedir is None:
    54         1           10     10.0      0.0          savedir = host.workdir
    55                                           
    56         2            7      3.5      0.0      dargs = (host.cvss_min_score, host.errata_keywords, host.core_rpms)
    57         2            4      2.0      0.0      rpmkeys = host.rpmkeys
    58                                           
    59         2           23     11.5      0.0      rpms = host.installed
    60       834         1790      2.1      0.0      rpms_rebuilt = [p for p in rpms if p.rebuilt]
    61       834         1632      2.0      0.0      rpms_replaced = [p for p in rpms if p.replaced]
    62       834         2096      2.5      0.0      rpms_from_others = [p for p in rpms if p.origin != host.rpm_vendor]
    63       834         1761      2.1      0.0      rpms_by_vendor = [p for p in rpms if p.origin == host.rpm_vendor and
    64       812         1744      2.1      0.0                        not p.rebuilt and not p.replaced]
    65         2            6      3.0      0.0      nps = len(rpms)
    66         2            4      2.0      0.0      nus = len(updates)
    67                                           
    68         2      2420371 1210185.5     23.8      data = dict(errata=fleure.analysis.analyze_errata(errata, *dargs),
    69         2            4      2.0      0.0                  installed=dict(list=rpms,
    70         2            4      2.0      0.0                                 list_rebuilt=rpms_rebuilt,
    71         2            4      2.0      0.0                                 list_replaced=rpms_replaced,
    72         2            4      2.0      0.0                                 list_from_others=rpms_from_others,
    73         2            4      2.0      0.0                                 list_by_vendor=rpms_by_vendor),
    74         2            4      2.0      0.0                  updates=dict(list=updates,
    75         2           18      9.0      0.0                               rate=[(_("packages need updates"), nus),
    76         2            7      3.5      0.0                                     (_("packages not need updates"),
    77         2            6      3.0      0.0                                      nps - nus)]))
    78                                           
    79         2      6401989 3200994.5     63.0      host.save(data, "summary", savedir)
    80         2            9      4.5      0.0      if savedir is None:  # Indicates that it's basic data.
    81                                                   fleure.depgraph.dump_depgraph(host.root, data["errata"],
    82                                                                                 host.workdir, tpaths=host.tpaths)
    83                                           
    84                                               # TODO: Keep DRY principle.
    85         2           41     20.5      0.0      lrpmkeys = [_("name"), _("epoch"), _("version"), _("release"), _("arch")]
    86                                           
    87         2          387    193.5      0.0      rpmdkeys = list(rpmkeys) + ["summary", "vendor", "buildhost"]
    88         2           18      9.0      0.0      lrpmdkeys = lrpmkeys + [_("summary"), _("vendor"), _("buildhost")]
    89                                           
    90         2            4      2.0      0.0      sekeys = ("advisory", "severity", "synopsis", "url", "update_names")
    91         2           16      8.0      0.0      lsekeys = (_("advisory"), _("severity"), _("synopsis"), _("url"),
    92         2            6      3.0      0.0                 _("update_names"))
    93         2            3      1.5      0.0      bekeys = ("advisory", "keywords", "synopsis", "url", "update_names")
    94         2           13      6.5      0.0      lbekeys = (_("advisory"), _("keywords"), _("synopsis"), _("url"),
    95         2            6      3.0      0.0                 _("update_names"))
    96                                           
    97         2         1493    746.5      0.0      mds = [fleure.analysis.mk_overview_dataset(data, *dargs),
    98         2            4      2.0      0.0             make_dataset((data["errata"]["rhsa"]["list_latest_critical"] +
    99         2            9      4.5      0.0                           data["errata"]["rhsa"]["list_latest_important"]),
   100         2         1335    667.5      0.0                          _("Cri-Important RHSAs (latests)"), sekeys, lsekeys),
   101         2            5      2.5      0.0             make_dataset(sorted(data["errata"]["rhsa"]["list_critical"],
   102         2           20     10.0      0.0                                 key=operator.attrgetter("update_names")) +
   103         2            4      2.0      0.0                          sorted(data["errata"]["rhsa"]["list_important"],
   104         2          104     52.0      0.0                                 key=operator.attrgetter("update_names")),
   105         2         2269   1134.5      0.0                          _("Critical or Important RHSAs"), sekeys, lsekeys),
   106         2            4      2.0      0.0             make_dataset(data["errata"]["rhba"]["list_by_kwds_of_core_rpms"],
   107         2          565    282.5      0.0                          _("RHBAs (core rpms, keywords)"), bekeys, lbekeys),
   108         2            5      2.5      0.0             make_dataset(data["errata"]["rhba"]["list_by_kwds"],
   109         2         3243   1621.5      0.0                          _("RHBAs (keyword)"), bekeys, lbekeys),
   110         2            5      2.5      0.0             make_dataset(data["errata"]["rhba"]["list_latests_of_core_rpms"],
   111         2          354    177.0      0.0                          _("RHBAs (core rpms, latests)"), bekeys, lbekeys),
   112         2            4      2.0      0.0             make_dataset(data["errata"]["rhsa"]["list_critical_updates"],
   113         2            8      4.0      0.0                          _("Update RPMs by RHSAs (Critical)"), rpmkeys,
   114         2         1056    528.0      0.0                          lrpmkeys),
   115         2            4      2.0      0.0             make_dataset(data["errata"]["rhsa"]["list_important_updates"],
   116         2         3293   1646.5      0.0                          _("Updates by RHSAs (Important)"), rpmkeys, lrpmkeys),
   117         2            4      2.0      0.0             make_dataset(data["errata"]["rhba"]["list_updates_by_kwds"],
   118         2        11494   5747.0      0.1                          _("Updates by RHBAs (Keyword)"), rpmkeys, lrpmkeys)]
   119                                           
   120         2            6      3.0      0.0      score = host.cvss_min_score
   121         2            3      1.5      0.0      if score > 0:
   122                                                   cvss_ds = [
   123                                                       make_dataset(data["errata"]["rhsa"]["list_higher_cvss_score"],
   124                                                                    _("RHSAs (CVSS score >= %.1f)") % score,
   125                                                                    ("advisory", "severity", "synopsis",
   126                                                                     "cves", "cvsses_s", "url"),
   127                                                                    (_("advisory"), _("severity"), _("synopsis"),
   128                                                                     _("cves"), _("cvsses_s"), _("url"))),
   129                                                       make_dataset(data["errata"]["rhsa"]["list_higher_cvss_score"],
   130                                                                    _("RHBAs (CVSS score >= %.1f)") % score,
   131                                                                    ("advisory", "synopsis", "cves", "cvsses_s", "url"),
   132                                                                    (_("advisory"), _("synopsis"), _("cves"),
   133                                                                     _("cvsses_s"), _("url")))]
   134                                                   mds.extend(cvss_ds)
   135                                           
   136         2            4      2.0      0.0      if data["installed"]["list_rebuilt"]:
   137                                                   mds.append(make_dataset(data["installed"]["list_rebuilt"],
   138                                                                           _("Rebuilt RPMs"), rpmdkeys, lrpmdkeys))
   139                                           
   140         2            4      2.0      0.0      if data["installed"]["list_replaced"]:
   141         2            4      2.0      0.0          mds.append(make_dataset(data["installed"]["list_replaced"],
   142         2          204    102.0      0.0                                  _("Replaced RPMs"), rpmdkeys, lrpmdkeys))
   143                                           
   144         2            4      2.0      0.0      if data["installed"]["list_from_others"]:
   145         2            4      2.0      0.0          mds.append(make_dataset(data["installed"]["list_from_others"],
   146         2            8      4.0      0.0                                  _("RPMs from other vendors"), rpmdkeys,
   147         2         1218    609.0      0.0                                  lrpmdkeys))
   148                                           
   149         2       161929  80964.5      1.6      save_xls(mds, os.path.join(savedir, "errata_summary.xls"))
   150                                           
   151         2           10      5.0      0.0      if host.details:
   152         2           14      7.0      0.0          dds = [make_dataset(errata, _("Errata Details"),
   153                                                                       ("advisory", "type", "severity", "synopsis",
   154                                                                        "description", "issue_date", "update_date", "url",
   155         2            5      2.5      0.0                               "cves", "bzs", "update_names"),
   156         2           12      6.0      0.0                              (_("advisory"), _("type"), _("severity"),
   157         2           11      5.5      0.0                               _("synopsis"), _("description"), _("issue_date"),
   158         2           11      5.5      0.0                               _("update_date"), _("url"), _("cves"),
   159         2        66396  33198.0      0.7                               _("bzs"), _("update_names"))),
   160         2        36932  18466.0      0.4                 make_dataset(asdicts(updates), _("Update RPMs"), rpmkeys,
   161         2       143757  71878.5      1.4                              lrpmkeys),
   162         2        37934  18967.0      0.4                 make_dataset(asdicts(rpms), _("Installed RPMs"), rpmdkeys,
   163         2        43949  21974.5      0.4                              lrpmdkeys)]
   164                                           
   165         2       806070 403035.0      7.9          save_xls(dds, os.path.join(savedir, "errata_details.xls"))

Total time: 0.060839 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: archive_report at line 313

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   313                                           def archive_report(reportdir, output):
   314                                               """Archive analysis report.
   315                                           
   316                                               :reportdir: Dir where generated report files exist
   317                                               :output: Output filename
   318                                               :return:
   319                                                   Absolute path of archive file made or None might indicates some
   320                                                   failures before/during making archive.
   321                                               """
   322         1            1      1.0      0.0      filenames = fleure.globals.REPORT_FILES
   323         1           26     26.0      0.0      if all(os.path.exists(os.path.join(reportdir, fn)) for fn in filenames):
   324         1        60572  60572.0     99.6          arcpath = fleure.archive.archive_report(reportdir, output)
   325         1          239    239.0      0.4          LOG.info(_("Archived results: %s"), arcpath)
   326         1            1      1.0      0.0          return arcpath
   327                                           
   328                                               LOG.warn(_("Reprot files (%s) do not exist. Do no make a report "
   329                                                          "archives"), ", ".join(filenames))
   330                                               return None

Total time: 102.332 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: main at line 333

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   333                                           def main(root_or_arc_path, hid=None, verbosity=0, **kwargs):
   334                                               """
   335                                               :param root_or_arc_path:
   336                                                   Path to the root dir of RPM DB files or Archive (tar.xz, tar.gz, zip,
   337                                                   etc.) of RPM DB files. Path might be a relative path from current dir.
   338                                               :param hid:
   339                                                   Some identification info of the target host where original RPM DB data
   340                                                   was collected.
   341                                               :param verbosity: Verbosity level: 0 (default), 1 (verbose), 2 (debug)
   342                                               :param kwargs:
   343                                                   Extra keyword arguments other than `root_or_arc_path` passed to make an
   344                                                   instance of :class:`fleure.config.Config`
   345                                           
   346                                               :return: Workdir where results exist or path to archive of results
   347                                               """
   348         1           14     14.0      0.0      set_loglevel(verbosity)
   349         1      5438248 5438248.0      5.3      host = configure(root_or_arc_path, hid, **kwargs)
   350         1            1      1.0      0.0      if host is None:
   351                                                   LOG.error(_("Failed to configure the host: root=%s"),
   352                                                             root_or_arc_path)
   353                                                   return None
   354                                           
   355         1     78760991 78760991.0     77.0      prepare(host)
   356                                           
   357         1            8      8.0      0.0      if host.available:
   358         1          258    258.0      0.0          LOG.info(_("Anaylize the host: %s"), host.hid)
   359         1     18071197 18071197.0     17.7          analyze(host)
   360                                           
   361         1            2      2.0      0.0      if kwargs.get("archive", False):
   362         1           11     11.0      0.0          outname = "report-%s-%s.zip" % (host.hid, fleure.globals.TODAY)
   363         1        60854  60854.0      0.1          return archive_report(host.workdir, outname)
   364                                               else:
   365                                                   return host.workdir


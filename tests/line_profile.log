2015-12-09 03:51:43,393 fleure: [INFO] 178fa9b4: 初期化を開始: root=/tmp/fleure-tests-gcBOk_, backend=dnf
2015-12-09 03:52:18,979 fleure: [INFO] 178fa9b4[dnf]: 初期化を完了、解析を開始 ...
2015-12-09 03:52:42,735 fleure: [INFO] 178fa9b4: 416 個 (rebuilt=0, replaced=1) のインストール RPM を発見
2015-12-09 03:52:42,927 fleure: [INFO] ホストを解析: 178fa9b4
2015-12-09 03:52:42,928 fleure: [INFO] 178fa9b4: エラータとパッケージを解析中 ...
2015-12-09 03:53:14,780 fleure: [INFO] 178fa9b4: 904 個のエラータと 250 個の更新 RPM を発見、一覧を保存
2015-12-09 03:53:30,640 fleure: [INFO] 178fa9b4: エラータとパッケージ [期間 20150101 ~ 20151112] を解析中
2015-12-09 03:53:30,641 fleure: [DEBUG] 178fa9b4: 指定期間データの作業用ディレクトリ /tmp/fleure-tests-gcBOk_/20150101_20151112 を作成
2015-12-09 03:53:39,753 fleure: [INFO] 178fa9b4 [20150101 ~ 20151112]: 384 個のエラータを発見、一覧を保存
2015-12-09 03:53:39,803 fleure: [INFO] 解析結果をアーカイブしました: /tmp/fleure-tests-gcBOk_/report-178fa9b4-2015-12-09.zip
Timer unit: 1e-06 s

Total time: 0.00203 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_latest_errata_by_updates at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           def list_latest_errata_by_updates(ers):
    30                                               """
    31                                               :param ers: A list of errata dict
    32                                               :return: A list of items in `ers` grouped by update names
    33                                               """
    34         6            7      1.2      0.3      ung = lambda e: sorted(set(u["name"] for u in e.get("updates", [])))
    35         6            3      0.5      0.1      return [xs[-1] for xs
    36        48         2020     42.1     99.5              in fleure.utils.sgroupby(ers, ung, itemgetter("issue_date"))]

Total time: 0.009138 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_from_errata at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           def list_updates_from_errata(ers):
    40                                               """
    41                                               :param ers: A list of errata dict
    42                                               """
    43         6         6812   1135.3     74.5      ups = sorted(fleure.utils.uconcat(e.get("updates", []) for e in ers),
    44         6          128     21.3      1.4                   key=itemgetter("name"))
    45         6            2      0.3      0.0      return [sorted(g, cmp=fleure.rpmutils.pcmp, reverse=True)[0] for g
    46       223         2196      9.8     24.0              in fleure.utils.sgroupby(ups, itemgetter("name"))]

Total time: 2.24469 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: errata_of_keywords_g at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def errata_of_keywords_g(ers, keywords=fleure.globals.ERRATA_KEYWORDS,
    63                                                                    stemming=True):
    64                                               """
    65                                               :param ers: A list of errata
    66                                               :param keywords: Keyword list to filter 'important' RHBAs
    67                                               :param stemming: Strict matching of keywords with using NLTK stemmer
    68                                               :return:
    69                                                   A generator to yield errata of which description contains any of
    70                                                   given keywords
    71                                           
    72                                               >>> ert0 = dict(advisory="RHSA-2015:XXX1",
    73                                               ...             description="system hangs, or crash...")
    74                                               >>> ert1 = dict(advisory="RHEA-2015:XXX2",
    75                                               ...             description="some enhancement and changes")
    76                                               >>> ers = list(errata_of_keywords_g([ert0], ("hang", ), True))
    77                                               >>> ert0 in ers
    78                                               True
    79                                               >>> ers[0]["keywords"]  # 'hangs' matches with stemming.
    80                                               ['hang']
    81                                               >>> ers = list(errata_of_keywords_g([ert0, ert1], ("hang", "crash"),
    82                                               ...                                 stemming=False))
    83                                               >>> ert0 in ers
    84                                               True
    85                                               >>> ers[0]["keywords"]  # 'hangs' does not match with 'hang'.
    86                                               ['crash']
    87                                               >>> ert1 in ers
    88                                               False
    89                                               """
    90         2            6      3.0      0.0      stemmer = _STEMMER.stem if stemming else None
    91       927          405      0.4      0.0      for ert in ers:
    92       925      2240919   2422.6     99.8          tokens = tokenize(ert["description"], stemmer)
    93      6475         2769      0.4      0.1          mks = [k for k in keywords if k in tokens]
    94       925          347      0.4      0.0          if mks:
    95       214          178      0.8      0.0              ert["keywords"] = mks
    96       214           70      0.3      0.0              yield ert

Total time: 0.048406 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_update_errata_pairs at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           def list_update_errata_pairs(ers):
   121                                               """
   122                                               :param ers: A list of errata dict
   123                                               :return: A list of (update_name, [errata_advisory])
   124                                           
   125                                               >>> ers = [dict(advisory="RHSA-2015:XXX1",
   126                                               ...             update_names=["kernel", "tzdata"]),
   127                                               ...        dict(advisory="RHSA-2014:XXX2",
   128                                               ...             update_names=["glibc", "tzdata"])
   129                                               ...        ]
   130                                               >>> list_update_errata_pairs(ers) == [
   131                                               ...     ('glibc', ['RHSA-2014:XXX2']),
   132                                               ...     ('kernel', ['RHSA-2015:XXX1']),
   133                                               ...     ('tzdata', ['RHSA-2015:XXX1', 'RHSA-2014:XXX2'])
   134                                               ... ]
   135                                               True
   136                                               """
   137        10           18      1.8      0.0      ues = fleure.utils.uconcat([(u, e["advisory"]) for u in e["update_names"]]
   138        10        46166   4616.6     95.4                                 for e in ers)
   139        10            8      0.8      0.0      return [(u, sorted((t[1] for t in g), reverse=True)) for u, g
   140       619         2214      3.6      4.6              in itertools.groupby(ues, itemgetter(0))]

Total time: 0.000363 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_by_num_of_errata at line 143

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   143                                           def list_updates_by_num_of_errata(uess):
   144                                               """
   145                                               List number of specific type of errata for each package names.
   146                                           
   147                                               :param uess: A list of (update, [errata_advisory]) pairs
   148                                               :return: [(package_name :: str, num_of_relevant_errata :: Int)]
   149                                           
   150                                               >>> ers = [{'advisory': u'RHSA-2015:1623',
   151                                               ...         'update_names': ['kernel-headers', 'kernel']},
   152                                               ...        {'advisory': 'RHSA-2015:1513',
   153                                               ...         'update_names': ['bind-utils']},
   154                                               ...        {'advisory': 'RHSA-2015:1081',
   155                                               ...         'update_names': ['kernel-headers', 'kernel']}
   156                                               ...        ]
   157                                               >>> list_updates_by_num_of_errata(list_update_errata_pairs(ers))
   158                                               [('kernel', 2), ('kernel-headers', 2), ('bind-utils', 1)]
   159                                               >>>
   160                                               """
   161         8            9      1.1      2.5      return sorted(((u, len(es)) for u, es in uess), key=itemgetter(1),
   162         8          354     44.2     97.5                    reverse=True)

Total time: 0.0125 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhsa at line 165

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   165                                           def analyze_rhsa(rhsa):
   166                                               """
   167                                               Compute and return statistics of RHSAs from some view points.
   168                                           
   169                                               :param rhsa: A list of security errata (RHSA) dicts
   170                                               :return: RHSA analized data and metrics
   171                                               """
   172       301          307      1.0      2.5      cri_rhsa = [e for e in rhsa if e["severity"] == "Critical"]
   173       301          282      0.9      2.3      imp_rhsa = [e for e in rhsa if e["severity"] == "Important"]
   174                                           
   175         2            4      2.0      0.0      rhsa_rate_by_sev = [("Critical", len(cri_rhsa)),
   176         2            2      1.0      0.0                          ("Important", len(imp_rhsa)),
   177         2            1      0.5      0.0                          ("Moderate",
   178       301          198      0.7      1.6                           len([e for e in rhsa
   179       299          272      0.9      2.2                                if e["severity"] == "Moderate"])),
   180         2            2      1.0      0.0                          ("Low",
   181       301          206      0.7      1.6                           len([e for e in rhsa
   182       299          266      0.9      2.1                                if e["severity"] == "Low"]))]
   183                                           
   184         2         4633   2316.5     37.1      rhsa_ues = list_update_errata_pairs(rhsa)
   185         2            2      1.0      0.0      _ups_by_nes = lambda es: \
   186                                                   list_updates_by_num_of_errata(list_update_errata_pairs(es))
   187                                           
   188         2            3      1.5      0.0      return {'list': rhsa,
   189         2            2      1.0      0.0              'list_critical': cri_rhsa,
   190         2            1      0.5      0.0              'list_important': imp_rhsa,
   191         2          259    129.5      2.1              'list_latest_critical': list_latest_errata_by_updates(cri_rhsa),
   192         2         1016    508.0      8.1              'list_latest_important': list_latest_errata_by_updates(imp_rhsa),
   193         2          348    174.0      2.8              'list_critical_updates': list_updates_from_errata(cri_rhsa),
   194         2         3148   1574.0     25.2              'list_important_updates': list_updates_from_errata(imp_rhsa),
   195         2            0      0.0      0.0              'rate_by_sev': rhsa_rate_by_sev,
   196         2           79     39.5      0.6              'list_n_by_pnames': list_updates_by_num_of_errata(rhsa_ues),
   197         2          249    124.5      2.0              'list_n_cri_by_pnames': _ups_by_nes(cri_rhsa),
   198         2         1218    609.0      9.7              'list_n_imp_by_pnames': _ups_by_nes(imp_rhsa),
   199         2            2      1.0      0.0              'list_by_packages': rhsa_ues}

Total time: 2.30371 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhba at line 202

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   202                                           def analyze_rhba(rhba, keywords=fleure.globals.ERRATA_KEYWORDS,
   203                                                            core_rpms=fleure.globals.CORE_RPMS):
   204                                               """
   205                                               Compute and return statistics of RHBAs from some view points.
   206                                           
   207                                               :param rhba: A list of bug errata (RHBA) dicts
   208                                               :param keywords: Keyword list to filter 'important' RHBAs
   209                                               :param core_rpms: Core RPMs to filter errata by them
   210                                               :return: RHSA analized data and metrics
   211                                               """
   212         2            1      0.5      0.0      kfn = lambda e: (len(e.get("keywords", [])), e["issue_date"],
   213                                                                e["update_names"])
   214         2            5      2.5      0.0      rhba_by_kwds = sorted(errata_of_keywords_g(rhba, keywords),
   215         2      2248728 1124364.0     97.6                            key=kfn, reverse=True)
   216                                               rhba_of_core_rpms_by_kwds = \
   217         2            5      2.5      0.0          sorted(errata_of_rpms_g(rhba_by_kwds, core_rpms),
   218         2         1148    574.0      0.0                 key=kfn, reverse=True)
   219         2            3      1.5      0.0      rhba_of_rpms = sorted(errata_of_rpms_g(rhba, core_rpms),
   220         2         4490   2245.0      0.2                            key=itemgetter("update_names"), reverse=True)
   221         2          822    411.0      0.0      latest_rhba_of_rpms = list_latest_errata_by_updates(rhba_of_rpms)
   222         2        42462  21231.0      1.8      rhba_ues = list_update_errata_pairs(rhba)
   223                                           
   224         2            2      1.0      0.0      return {'list': rhba,
   225         2            1      0.5      0.0              'list_by_kwds': rhba_by_kwds,
   226         2            2      1.0      0.0              'list_of_core_rpms': rhba_of_rpms,
   227         2            1      0.5      0.0              'list_latests_of_core_rpms': latest_rhba_of_rpms,
   228         2            1      0.5      0.0              'list_by_kwds_of_core_rpms': rhba_of_core_rpms_by_kwds,
   229         2         5789   2894.5      0.3              'list_updates_by_kwds': list_updates_from_errata(rhba_by_kwds),
   230         2          252    126.0      0.0              'list_n_by_pnames': list_updates_by_num_of_errata(rhba_ues),
   231         2            0      0.0      0.0              'list_by_packages': rhba_ues}

Total time: 2.32235 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_errata at line 278

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   278                                           def analyze_errata(ers, score=fleure.globals.CVSS_MIN_SCORE,
   279                                                              keywords=fleure.globals.ERRATA_KEYWORDS,
   280                                                              core_rpms=fleure.globals.CORE_RPMS):
   281                                               """
   282                                               :param ers: A list of applicable errata sorted by severity
   283                                                   if it's RHSA and advisory in ascending sequence
   284                                               :param score: CVSS base metrics score
   285                                               :param keywords: Keyword list to filter 'important' RHBAs
   286                                               :param core_rpms: Core RPMs to filter errata by them
   287                                               """
   288      1290         1545      1.2      0.1      rhsa = [e for e in ers if e["advisory"][2] == 'S']
   289      1290         1305      1.0      0.1      rhba = [e for e in ers if e["advisory"][2] == 'B']
   290      1290         1348      1.0      0.1      rhea = [e for e in ers if e["advisory"][2] == 'E']
   291                                           
   292         2        13960   6980.0      0.6      rhsa_data = analyze_rhsa(rhsa)
   293         2      2303761 1151880.5     99.2      rhba_data = analyze_rhba(rhba, keywords, core_rpms)
   294                                           
   295         2            2      1.0      0.0      if score > 0:
   296                                                   rhba_by_score = list(higher_score_cve_errata_g(rhba, score))
   297                                                   us_of_rhba_by_score = list_updates_from_errata(rhba_by_score)
   298                                               else:
   299         2            2      1.0      0.0          rhsa_by_score = []
   300         2            0      0.0      0.0          rhba_by_score = []
   301         2            1      0.5      0.0          us_of_rhsa_by_score = []
   302         2            2      1.0      0.0          us_of_rhba_by_score = []
   303                                           
   304         2            2      1.0      0.0      rhsa_data["list_higher_cvss_score"] = rhsa_by_score
   305         2            1      0.5      0.0      rhba_data["list_higher_cvss_score"] = rhba_by_score
   306         2            1      0.5      0.0      rhsa_data["list_higher_cvss_updates"] = us_of_rhsa_by_score
   307         2            1      0.5      0.0      rhba_data["list_higher_cvss_updates"] = us_of_rhba_by_score
   308                                           
   309         2            2      1.0      0.0      return dict(rhsa=rhsa_data,
   310         2            2      1.0      0.0                  rhba=rhba_data,
   311         2            0      0.0      0.0                  rhea=dict(list=rhea,
   312         2          414    207.0      0.0                            list_by_packages=list_update_errata_pairs(rhea)),
   313         2            2      1.0      0.0                  rate_by_type=[("Security", len(rhsa)),
   314         2            1      0.5      0.0                                ("Bug", len(rhba)),
   315         2            3      1.5      0.0                                ("Enhancement", len(rhea))])

Total time: 0.001036 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: mk_overview_dataset at line 330

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   330                                           def mk_overview_dataset(data, score=fleure.globals.CVSS_MIN_SCORE,
   331                                                                   keywords=fleure.globals.ERRATA_KEYWORDS,
   332                                                                   core_rpms=None):
   333                                               """
   334                                               :param data: RPMs, Update RPMs and various errata data summarized
   335                                               :param score: CVSS base metrics score limit
   336                                               :param core_rpms: Core RPMs to filter errata by them
   337                                           
   338                                               :return: An instance of tablib.Dataset becomes a worksheet represents the
   339                                                   overview of analysys reuslts
   340                                               """
   341         2            9      4.5      0.9      rows = [[_("Critical or Important RHSAs (Security Errata)")],
   342         2            6      3.0      0.6              [_("# of Critical RHSAs"),
   343         2            8      4.0      0.8               len(data["errata"]["rhsa"]["list_critical"])],
   344         2            6      3.0      0.6              [_("# of Critical RHSAs (latests only)"),
   345         2            4      2.0      0.4               len(data["errata"]["rhsa"]["list_latest_critical"])],
   346         2            4      2.0      0.4              [_("# of Important RHSAs"),
   347         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_important"])],
   348         2            4      2.0      0.4              [_("# of Important RHSAs (latests only)"),
   349         2            4      2.0      0.4               len(data["errata"]["rhsa"]["list_latest_important"])],
   350         2            8      4.0      0.8              [_("Update RPMs by Critical or Important RHSAs at minimum")],
   351         2            5      2.5      0.5              [_("# of Update RPMs by Critical RHSAs at minimum"),
   352         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_critical_updates"])],
   353         2            6      3.0      0.6              [_("# of Update RPMs by Important RHSAs at minimum"),
   354         2            2      1.0      0.2               len(data["errata"]["rhsa"]["list_important_updates"])],
   355         2            2      1.0      0.2              [],
   356         2           17      8.5      1.6              [_("RHBAs (Bug Errata) by keywords: %s") % ", ".join(keywords)],
   357         2            4      2.0      0.4              [_("# of RHBAs by keywords"),
   358         2            4      2.0      0.4               len(data["errata"]["rhba"]["list_by_kwds"])],
   359         2            6      3.0      0.6              [_("# of Update RPMs by RHBAs by keywords at minimum"),
   360         2            4      2.0      0.4               len(data["errata"]["rhba"]["list_updates_by_kwds"])]]
   361                                           
   362         2            2      1.0      0.2      if core_rpms is not None:
   363         2            1      0.5      0.1          rows += [[],
   364         2           13      6.5      1.3                   [_("RHBAs of core rpms: %s") % ", ".join(core_rpms)],
   365         2            6      3.0      0.6                   [_("# of RHBAs of core rpms (latests only)"),
   366         2            7      3.5      0.7                    len(data["errata"]["rhba"]["list_latests_of_core_rpms"])]]
   367                                           
   368         2            2      1.0      0.2      if score > 0:
   369                                                   rows += [[],
   370                                                            [_("RHSAs and RHBAs by CVSS score")],
   371                                                            [_("# of RHSAs of CVSS Score >= %.1f") % score,
   372                                                             len(data["errata"]["rhsa"]["list_higher_cvss_score"])],
   373                                                            [_("# of Update RPMs by the above RHSAs at minimum"),
   374                                                             len(data["errata"]["rhsa"]["list_higher_cvss_updates"])],
   375                                                            [_("# of RHBAs of CVSS Score >= %.1f") % score,
   376                                                             len(data["errata"]["rhba"]["list_higher_cvss_score"])],
   377                                                            [_("# of Update RPMs by the above RHBAs at minimum"),
   378                                                             len(data["errata"]["rhba"]["list_higher_cvss_updates"])]]
   379                                           
   380         2            1      0.5      0.1      rows += [[],
   381         2            9      4.5      0.9               [_("# of RHSAs"), len(data["errata"]["rhsa"]["list"])],
   382         2            6      3.0      0.6               [_("# of RHBAs"), len(data["errata"]["rhba"]["list"])],
   383         2            4      2.0      0.4               [_("# of RHEAs (Enhancement Errata)"),
   384         2            4      2.0      0.4                len(data["errata"]["rhea"]["list"])],
   385         2            7      3.5      0.7               [_("# of Update RPMs"), len(data["updates"]["list"])],
   386         2            7      3.5      0.7               [_("# of Installed RPMs"), len(data["installed"]["list"])],
   387         2            2      1.0      0.2               [],
   388         2            5      2.5      0.5               [_("Origin of Installed RPMs")],
   389         2            5      2.5      0.5               [_("# of Rebuilt RPMs"), len(data["installed"]["list_rebuilt"])],
   390         2            4      2.0      0.4               [_("# of Replaced RPMs"),
   391         2            4      2.0      0.4                len(data["installed"]["list_replaced"])],
   392         2            6      3.0      0.6               [_("# of RPMs from other vendors (non Red Hat)"),
   393         2            7      3.5      0.7                len(data["installed"]["list_from_others"])]]
   394                                           
   395         2           10      5.0      1.0      headers = (_("Item"), _("Value"), _("Notes"))
   396         2          223    111.5     21.5      dataset = tablib.Dataset(headers=headers)
   397         2            9      4.5      0.9      dataset.title = _("Overview of analysis results")
   398                                           
   399         2            2      1.0      0.2      mcols = len(headers)
   400        54           51      0.9      4.9      for row in rows:
   401        52           51      1.0      4.9          if row and len(row) == 1:  # Special case: separator
   402        10           60      6.0      5.8              dataset.append_separator(row[0])
   403                                                   else:
   404        42          418     10.0     40.3              dataset.append(padding_row(row, mcols))
   405                                           
   406         2            1      0.5      0.1      return dataset

Total time: 0.12682 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/datasets.py
Function: make_dataset at line 116

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   116                                           def make_dataset(list_data, title=None, headers=None, lheaders=None,
   117                                                            is_tuple=False):
   118                                               """
   119                                               :param list_data: List of data, may be consists of [[namedtuple]]
   120                                               :param title: Dataset title to be used as worksheet's name
   121                                               :param headers: Dataset headers to be used as column headers, etc.
   122                                               :param lheaders: Localized version of `headers`
   123                                               :param is_tuple: True if list_data consists of [namedtuple]
   124                                           
   125                                               TODO: Which is better?
   126                                                   - tablib.Dataset(); [tablib.append(vals) for vals in list_data]
   127                                                   - tablib.Dataset(*list_data, header=...)
   128                                               """
   129        26           15      0.6      0.0      if is_tuple:
   130         8            9      1.1      0.0          getter = lambda obj, key, default=None: getattr(obj, key, default)
   131                                               else:
   132        18           19      1.1      0.0          getter = lambda obj, key, default=None: obj.get(key, default)
   133                                           
   134                                               # .. note::
   135                                               #    We need to check title as valid worksheet name, length <= 31, etc.
   136                                               #    See also xlwt.Utils.valid_sheet_name.
   137        26           13      0.5      0.0      if headers is not None:
   138        26           21      0.8      0.0          tdata = [[_make_cell_data(val, h, getter) for h in headers] for val
   139     30176       118952      3.9     93.8                   in list_data]
   140        26           20      0.8      0.0          headers = headers if lheaders is None else lheaders
   141                                               else:
   142                                                   tdata = [val if is_tuple else val.values() for val in list_data]
   143                                           
   144        26         7771    298.9      6.1      return tablib.Dataset(*tdata, title=title[:30], headers=headers)

Total time: 121.84 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/decorators.py
Function: decorated at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               @functools.wraps(fnc)
    40                                               def decorated(*args, **kwargs):
    41                                                   """Decorated one"""
    42         3    121840164 40613388.0    100.0          return fnc(*args, **kwargs)

Total time: 24.9527 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: dump_results at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           def dump_results(host, rpms, errata, updates, dumpdir=None):
    47                                               """
    48                                               Dump package level static analysis results.
    49                                           
    50                                               :param host: host object function :function:`prepare` returns
    51                                               :param rpms: A list of installed RPMs
    52                                               :param errata: A list of applicable errata
    53                                               :param updates: A list of update RPMs
    54                                               :param dumpdir: Dir to save results
    55                                               """
    56         2            5      2.5      0.0      if dumpdir is None:
    57         1            7      7.0      0.0          dumpdir = host.workdir
    58                                           
    59         2            6      3.0      0.0      dargs = (host.cvss_min_score, host.errata_keywords, host.core_rpms)
    60         2            3      1.5      0.0      rpmkeys = host.rpmkeys
    61                                           
    62       834         1774      2.1      0.0      rpms_rebuilt = [p for p in rpms if p.rebuilt]
    63       834         1535      1.8      0.0      rpms_replaced = [p for p in rpms if p.replaced]
    64       834         1540      1.8      0.0      rpms_from_others = [p for p in rpms if p.origin != host.rpm_vendor]
    65       834         1899      2.3      0.0      rpms_by_vendor = [p for p in rpms if p.origin == host.rpm_vendor and
    66       812         1880      2.3      0.0                        not p.rebuilt and not p.replaced]
    67         2            6      3.0      0.0      nps = len(rpms)
    68         2            5      2.5      0.0      nus = len(updates)
    69                                           
    70         2      2325604 1162802.0      9.3      ers = fleure.analysis.analyze_errata(errata, *dargs)
    71         2            4      2.0      0.0      data = dict(errata=ers,
    72         2        36843  18421.5      0.1                  installed=dict(list=asdicts(rpms),
    73         2            6      3.0      0.0                                 list_rebuilt=asdicts(rpms_rebuilt),
    74         2           84     42.0      0.0                                 list_replaced=asdicts(rpms_replaced),
    75         2          794    397.0      0.0                                 list_from_others=asdicts(rpms_from_others),
    76         2        33611  16805.5      0.1                                 list_by_vendor=asdicts(rpms_by_vendor)),
    77         2        20756  10378.0      0.1                  updates=dict(list=asdicts(updates),
    78         2           17      8.5      0.0                               rate=[(_("packages need updates"), nus),
    79         2            7      3.5      0.0                                     (_("packages not need updates"),
    80         2            6      3.0      0.0                                      nps - nus)]))
    81                                           
    82         2     12267330 6133665.0     49.2      host.save(data, "summary", dumpdir)
    83         2           74     37.0      0.0      fleure.depgraph.dump_depgraph(host.root, ers, host.workdir,
    84         2      9092076 4546038.0     36.4                                    tpaths=host.tpaths)
    85                                               # TODO: Keep DRY principle.
    86         2           55     27.5      0.0      lrpmkeys = [_("name"), _("epoch"), _("version"), _("release"), _("arch")]
    87                                           
    88         2           20     10.0      0.0      rpmdkeys = list(rpmkeys) + ["summary", "vendor", "buildhost"]
    89         2           11      5.5      0.0      lrpmdkeys = lrpmkeys + [_("summary"), _("vendor"), _("buildhost")]
    90                                           
    91         2            5      2.5      0.0      sekeys = ("advisory", "severity", "synopsis", "url", "update_names")
    92         2           14      7.0      0.0      lsekeys = (_("advisory"), _("severity"), _("synopsis"), _("url"),
    93         2            9      4.5      0.0                 _("update_names"))
    94         2            4      2.0      0.0      bekeys = ("advisory", "keywords", "synopsis", "url", "update_names")
    95         2           14      7.0      0.0      lbekeys = (_("advisory"), _("keywords"), _("synopsis"), _("url"),
    96         2            5      2.5      0.0                 _("update_names"))
    97                                           
    98         2         1360    680.0      0.0      mds = [fleure.analysis.mk_overview_dataset(data, *dargs),
    99         2            6      3.0      0.0             make_dataset((data["errata"]["rhsa"]["list_latest_critical"] +
   100         2           26     13.0      0.0                           data["errata"]["rhsa"]["list_latest_important"]),
   101         2         1147    573.5      0.0                          _("Cri-Important RHSAs (latests)"), sekeys, lsekeys),
   102         2            4      2.0      0.0             make_dataset(sorted(data["errata"]["rhsa"]["list_critical"],
   103         2           76     38.0      0.0                                 key=itemgetter("update_names")) +
   104         2            4      2.0      0.0                          sorted(data["errata"]["rhsa"]["list_important"],
   105         2          244    122.0      0.0                                 key=itemgetter("update_names")),
   106         2         3839   1919.5      0.0                          _("Critical or Important RHSAs"), sekeys, lsekeys),
   107         2            5      2.5      0.0             make_dataset(data["errata"]["rhba"]["list_by_kwds_of_core_rpms"],
   108         2         1195    597.5      0.0                          _("RHBAs (core rpms, keywords)"), bekeys, lbekeys),
   109         2            4      2.0      0.0             make_dataset(data["errata"]["rhba"]["list_by_kwds"],
   110         2         5899   2949.5      0.0                          _("RHBAs (keyword)"), bekeys, lbekeys),
   111         2            4      2.0      0.0             make_dataset(data["errata"]["rhba"]["list_latests_of_core_rpms"],
   112         2          303    151.5      0.0                          _("RHBAs (core rpms, latests)"), bekeys, lbekeys),
   113         2            4      2.0      0.0             make_dataset(data["errata"]["rhsa"]["list_critical_updates"],
   114         2            8      4.0      0.0                          _("Update RPMs by RHSAs (Critical)"), rpmkeys,
   115         2          553    276.5      0.0                          lrpmkeys),
   116         2            4      2.0      0.0             make_dataset(data["errata"]["rhsa"]["list_important_updates"],
   117         2         1247    623.5      0.0                          _("Updates by RHSAs (Important)"), rpmkeys, lrpmkeys),
   118         2           15      7.5      0.0             make_dataset(data["errata"]["rhba"]["list_updates_by_kwds"],
   119         2         4025   2012.5      0.0                          _("Updates by RHBAs (Keyword)"), rpmkeys, lrpmkeys)]
   120                                           
   121         2           10      5.0      0.0      score = host.cvss_min_score
   122         2            3      1.5      0.0      if score > 0:
   123                                                   cvss_ds = [
   124                                                       make_dataset(data["errata"]["rhsa"]["list_higher_cvss_score"],
   125                                                                    _("RHSAs (CVSS score >= %.1f)") % score,
   126                                                                    ("advisory", "severity", "synopsis",
   127                                                                     "cves", "cvsses_s", "url"),
   128                                                                    (_("advisory"), _("severity"), _("synopsis"),
   129                                                                     _("cves"), _("cvsses_s"), _("url"))),
   130                                                       make_dataset(data["errata"]["rhsa"]["list_higher_cvss_score"],
   131                                                                    _("RHBAs (CVSS score >= %.1f)") % score,
   132                                                                    ("advisory", "synopsis", "cves", "cvsses_s", "url"),
   133                                                                    (_("advisory"), _("synopsis"), _("cves"),
   134                                                                     _("cvsses_s"), _("url")))]
   135                                                   mds.extend(cvss_ds)
   136                                           
   137         2            4      2.0      0.0      if data["installed"]["list_rebuilt"]:
   138                                                   mds.append(make_dataset(data["installed"]["list_rebuilt"],
   139                                                                           _("Rebuilt RPMs"), rpmdkeys, lrpmdkeys,
   140                                                                           is_tuple=True))
   141                                           
   142         2            4      2.0      0.0      if data["installed"]["list_replaced"]:
   143         2            2      1.0      0.0          mds.append(make_dataset(data["installed"]["list_replaced"],
   144         2           11      5.5      0.0                                  _("Replaced RPMs"), rpmdkeys, lrpmdkeys,
   145         2          179     89.5      0.0                                  is_tuple=True))
   146                                           
   147         2            4      2.0      0.0      if data["installed"]["list_from_others"]:
   148         2            4      2.0      0.0          mds.append(make_dataset(data["installed"]["list_from_others"],
   149         2            8      4.0      0.0                                  _("RPMs from other vendors"), rpmdkeys,
   150         2          830    415.0      0.0                                  lrpmdkeys, is_tuple=True))
   151                                           
   152         2       147874  73937.0      0.6      dump_xls(mds, os.path.join(dumpdir, "errata_summary.xls"))
   153                                           
   154         2           13      6.5      0.0      if host.details:
   155         2           25     12.5      0.0          dds = [make_dataset(errata, _("Errata Details"),
   156                                                                       ("advisory", "type", "severity", "synopsis",
   157                                                                        "description", "issue_date", "update_date", "url",
   158         2            5      2.5      0.0                               "cves", "bzs", "update_names"),
   159         2           12      6.0      0.0                              (_("advisory"), _("type"), _("severity"),
   160         2           12      6.0      0.0                               _("synopsis"), _("description"), _("issue_date"),
   161         2           11      5.5      0.0                               _("update_date"), _("url"), _("cves"),
   162         2        86037  43018.5      0.3                               _("bzs"), _("update_names"))),
   163         2        22155  11077.5      0.1                 make_dataset(asdicts(updates), _("Update RPMs"), rpmkeys,
   164         2        12672   6336.0      0.1                              lrpmkeys, is_tuple=True),
   165         2        36172  18086.0      0.1                 make_dataset(asdicts(rpms), _("Installed RPMs"), rpmdkeys,
   166         2        33308  16654.0      0.1                              lrpmdkeys, is_tuple=True)]
   167                                           
   168         2       807343 403671.5      3.2          dump_xls(dds, os.path.join(dumpdir, "errata_details.xls"))

Total time: 0.049665 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: archive_report at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                           def archive_report(reportdir, output):
   308                                               """Archive analysis report.
   309                                           
   310                                               :reportdir: Dir where generated report files exist
   311                                               :output: Output filename
   312                                               :return:
   313                                                   Absolute path of archive file made or None might indicates some
   314                                                   failures before/during making archive.
   315                                               """
   316         1            2      2.0      0.0      filenames = fleure.globals.REPORT_FILES
   317         1           27     27.0      0.1      if all(os.path.exists(os.path.join(reportdir, fn)) for fn in filenames):
   318         1        49401  49401.0     99.5          arcpath = fleure.archive.archive_report(reportdir, output)
   319         1          234    234.0      0.5          LOG.info(_("Archived results: %s"), arcpath)
   320         1            1      1.0      0.0          return arcpath
   321                                           
   322                                               LOG.warn(_("Reprot files (%s) do not exist. Do no make a report "
   323                                                          "archives"), ", ".join(filenames))
   324                                               return None

Total time: 121.89 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: main at line 327

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   327                                           def main(root_or_arc_path, hid=None, verbosity=0, **kwargs):
   328                                               """
   329                                               :param root_or_arc_path:
   330                                                   Path to the root dir of RPM DB files or Archive (tar.xz, tar.gz, zip,
   331                                                   etc.) of RPM DB files. Path might be a relative path from current dir.
   332                                               :param hid:
   333                                                   Some identification info of the target host where original RPM DB data
   334                                                   was collected.
   335                                               :param verbosity: Verbosity level: 0 (default), 1 (verbose), 2 (debug)
   336                                               :param kwargs:
   337                                                   Extra keyword arguments other than `root_or_arc_path` passed to make an
   338                                                   instance of :class:`fleure.config.Config`
   339                                           
   340                                               :return: Workdir where results exist or path to archive of results
   341                                               """
   342         1           15     15.0      0.0      set_loglevel(verbosity)
   343         1      5479710 5479710.0      4.5      host = configure(root_or_arc_path, hid, **kwargs)
   344         1            1      1.0      0.0      if host is None:
   345                                                   LOG.error(_("Failed to configure the host: root=%s"),
   346                                                             root_or_arc_path)
   347                                                   return None
   348                                           
   349         1     59534298 59534298.0     48.8      prepare(host)
   350                                           
   351         1            7      7.0      0.0      if host.available:
   352         1          248    248.0      0.0          LOG.info(_("Anaylize the host: %s"), host.hid)
   353         1     56826176 56826176.0     46.6          analyze(host)
   354                                           
   355         1            2      2.0      0.0      if kwargs.get("archive", False):
   356         1            7      7.0      0.0          outname = "report-%s-%s.zip" % (host.hid, fleure.globals.TODAY)
   357         1        49680  49680.0      0.0          return archive_report(host.workdir, outname)
   358                                               else:
   359                                                   return host.workdir


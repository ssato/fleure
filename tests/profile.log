ssato@x1carbon% PYTHONPATH=. python tests/profile.py          ~/repos/public/github.com/ssato/fleure.git
Couldn't import dot_parser, loading of dot files will not be possible.
2016-04-14 15:32:51,575 fleure: [INFO] 5cbbb713: 初期化を開始: root=/tmp/fleure-tests-xQ6DBw, backend=dnf
2016-04-14 15:34:02,451 fleure: [INFO] 5cbbb713[dnf]: 初期化を完了、解析を開始 ...
2016-04-14 15:34:02,697 fleure: [INFO] 5cbbb713: 416 個 (rebuilt=0, replaced=1) のインストール RPM を発見
2016-04-14 15:34:02,884 fleure: [INFO] ホストを解析: 5cbbb713
2016-04-14 15:34:02,886 fleure: [INFO] 5cbbb713: エラータとパッケージを解析中 ...
2016-04-14 15:34:07,830 fleure: [INFO] 5cbbb713: 518 個のエラータと 253 個の更新 RPM を発見、一覧を保存
2016-04-14 15:34:07,892 fleure.analysis: [DEBUG] RHBA-2013:1572 matched: keywords=crash
2016-04-14 15:34:07,896 fleure.analysis: [DEBUG] RHBA-2013:1583 matched: keywords=crash
2016-04-14 15:34:07,917 fleure.analysis: [DEBUG] RHBA-2013:1609 matched: keywords=crash
2016-04-14 15:34:07,931 fleure.analysis: [DEBUG] RHBA-2013:1643 matched: keywords=crash
2016-04-14 15:34:07,935 fleure.analysis: [DEBUG] RHBA-2013:1647 matched: keywords=crash
2016-04-14 15:34:07,944 fleure.analysis: [DEBUG] RHBA-2013:1648 matched: keywords=crash
2016-04-14 15:34:07,984 fleure.analysis: [DEBUG] RHBA-2013:1685 matched: keywords=crash
2016-04-14 15:34:08,021 fleure.analysis: [DEBUG] RHBA-2013:1713 matched: keywords=panic
2016-04-14 15:34:08,029 fleure.analysis: [DEBUG] RHBA-2013:1716 matched: keywords=crash
2016-04-14 15:34:08,073 fleure.analysis: [DEBUG] RHBA-2014:0156 matched: keywords=crash
2016-04-14 15:34:08,106 fleure.analysis: [DEBUG] RHBA-2014:0303 matched: keywords=crash
2016-04-14 15:34:08,185 fleure.analysis: [DEBUG] RHBA-2014:0776 matched: keywords=crash
2016-04-14 15:34:08,195 fleure.analysis: [DEBUG] RHBA-2014:0806 matched: keywords=crash
2016-04-14 15:34:08,203 fleure.analysis: [DEBUG] RHBA-2014:0857 matched: keywords=crash
2016-04-14 15:34:08,206 fleure.analysis: [DEBUG] RHBA-2014:0872 matched: keywords=crash
2016-04-14 15:34:08,220 fleure.analysis: [DEBUG] RHBA-2014:1005 matched: keywords=hang
2016-04-14 15:34:08,225 fleure.analysis: [DEBUG] RHBA-2014:1015 matched: keywords=crash
2016-04-14 15:34:08,232 fleure.analysis: [DEBUG] RHBA-2014:1056 matched: keywords=crash
2016-04-14 15:34:08,239 fleure.analysis: [DEBUG] RHBA-2014:1107 matched: keywords=hang
2016-04-14 15:34:08,258 fleure.analysis: [DEBUG] RHBA-2014:1189 matched: keywords=crash
2016-04-14 15:34:08,307 fleure.analysis: [DEBUG] RHBA-2014:1410 matched: keywords=crash
2016-04-14 15:34:08,315 fleure.analysis: [DEBUG] RHBA-2014:1411 matched: keywords=crash
2016-04-14 15:34:08,328 fleure.analysis: [DEBUG] RHBA-2014:1419 matched: keywords=crash
2016-04-14 15:34:08,365 fleure.analysis: [DEBUG] RHBA-2014:1460 matched: keywords=crash
2016-04-14 15:34:08,414 fleure.analysis: [DEBUG] RHBA-2014:1503 matched: keywords=hang, crash
2016-04-14 15:34:08,452 fleure.analysis: [DEBUG] RHBA-2014:1528 matched: keywords=hang
2016-04-14 15:34:08,459 fleure.analysis: [DEBUG] RHBA-2014:1534 matched: keywords=crash
2016-04-14 15:34:08,489 fleure.analysis: [DEBUG] RHBA-2014:1555 matched: keywords=hang, crash
2016-04-14 15:34:08,527 fleure.analysis: [DEBUG] RHBA-2014:1579 matched: keywords=crash
2016-04-14 15:34:08,531 fleure.analysis: [DEBUG] RHBA-2014:1594 matched: keywords=hang
2016-04-14 15:34:08,586 fleure.analysis: [DEBUG] RHBA-2014:1854 matched: keywords=crash
2016-04-14 15:34:08,594 fleure.analysis: [DEBUG] RHBA-2014:1884 matched: keywords=crash
2016-04-14 15:34:08,627 fleure.analysis: [DEBUG] RHBA-2015:0108 matched: keywords=hang
2016-04-14 15:34:08,633 fleure.analysis: [DEBUG] RHBA-2015:0129 matched: keywords=crash
2016-04-14 15:34:08,651 fleure.analysis: [DEBUG] RHBA-2015:0810 matched: keywords=crash
2016-04-14 15:34:08,661 fleure.analysis: [DEBUG] RHBA-2015:0926 matched: keywords=crash
2016-04-14 15:34:08,689 fleure.analysis: [DEBUG] RHBA-2015:1085 matched: keywords=crash
2016-04-14 15:34:08,711 fleure.analysis: [DEBUG] RHBA-2015:1250 matched: keywords=crash
2016-04-14 15:34:08,738 fleure.analysis: [DEBUG] RHBA-2015:1266 matched: keywords=crash
2016-04-14 15:34:08,747 fleure.analysis: [DEBUG] RHBA-2015:1277 matched: keywords=crash
2016-04-14 15:34:08,765 fleure.analysis: [DEBUG] RHBA-2015:1286 matched: keywords=crash
2016-04-14 15:34:08,775 fleure.analysis: [DEBUG] RHBA-2015:1292 matched: keywords=crash
2016-04-14 15:34:08,781 fleure.analysis: [DEBUG] RHBA-2015:1293 matched: keywords=crash
2016-04-14 15:34:08,818 fleure.analysis: [DEBUG] RHBA-2015:1325 matched: keywords=crash
2016-04-14 15:34:08,849 fleure.analysis: [DEBUG] RHBA-2015:1339 matched: keywords=crash
2016-04-14 15:34:08,866 fleure.analysis: [DEBUG] RHBA-2015:1346 matched: keywords=crash
2016-04-14 15:34:08,899 fleure.analysis: [DEBUG] RHBA-2015:1380 matched: keywords=hang
2016-04-14 15:34:08,925 fleure.analysis: [DEBUG] RHBA-2015:1391 matched: keywords=crash
2016-04-14 15:34:08,952 fleure.analysis: [DEBUG] RHBA-2015:1407 matched: keywords=crash
2016-04-14 15:34:08,956 fleure.analysis: [DEBUG] RHBA-2015:1408 matched: keywords=hang
2016-04-14 15:34:08,985 fleure.analysis: [DEBUG] RHBA-2015:1441 matched: keywords=crash
2016-04-14 15:34:08,995 fleure.analysis: [DEBUG] RHBA-2015:1450 matched: keywords=crash
2016-04-14 15:34:09,006 fleure.analysis: [DEBUG] RHBA-2015:1465 matched: keywords=hang
2016-04-14 15:34:09,012 fleure.analysis: [DEBUG] RHBA-2015:1470 matched: keywords=hang
2016-04-14 15:34:09,015 fleure.analysis: [DEBUG] RHBA-2015:1609 matched: keywords=crash
2016-04-14 15:34:09,028 fleure.analysis: [DEBUG] RHBA-2015:1615 matched: keywords=crash
2016-04-14 15:34:09,035 fleure.analysis: [DEBUG] RHBA-2015:1711 matched: keywords=crash
2016-04-14 15:34:09,050 fleure.analysis: [DEBUG] RHBA-2015:1822 matched: keywords=hang, crash
2016-04-14 15:34:09,072 fleure.analysis: [DEBUG] RHBA-2015:1827 matched: keywords=panic, crash
2016-04-14 15:34:09,081 fleure.analysis: [DEBUG] RHBA-2015:1992 matched: keywords=panic, crash
2016-04-14 15:34:09,136 fleure.analysis: [DEBUG] RHBA-2016:0144 matched: keywords=crash
2016-04-14 15:34:09,150 fleure.analysis: [DEBUG] RHBA-2016:0150 matched: keywords=hang, panic, crash
2016-04-14 15:34:09,155 fleure.analysis: [DEBUG] RHBA-2016:0481 matched: keywords=crash
2016-04-14 15:34:17,442 fleure: [INFO] 5cbbb713: エラータとパッケージ [期間 20150101 ~ 20160411] を解析中
2016-04-14 15:34:17,442 fleure: [DEBUG] 5cbbb713: 指定期間データの作業用ディレクトリ /tmp/fleure-tests-xQ6DBw/20150101_20160411 を作成
2016-04-14 15:34:17,473 fleure.analysis: [DEBUG] RHBA-2015:0108 matched: keywords=hang
2016-04-14 15:34:17,480 fleure.analysis: [DEBUG] RHBA-2015:0129 matched: keywords=crash
2016-04-14 15:34:17,497 fleure.analysis: [DEBUG] RHBA-2015:0810 matched: keywords=crash
2016-04-14 15:34:17,508 fleure.analysis: [DEBUG] RHBA-2015:0926 matched: keywords=crash
2016-04-14 15:34:17,537 fleure.analysis: [DEBUG] RHBA-2015:1085 matched: keywords=crash
2016-04-14 15:34:17,561 fleure.analysis: [DEBUG] RHBA-2015:1250 matched: keywords=crash
2016-04-14 15:34:17,591 fleure.analysis: [DEBUG] RHBA-2015:1266 matched: keywords=crash
2016-04-14 15:34:17,599 fleure.analysis: [DEBUG] RHBA-2015:1277 matched: keywords=crash
2016-04-14 15:34:17,618 fleure.analysis: [DEBUG] RHBA-2015:1286 matched: keywords=crash
2016-04-14 15:34:17,630 fleure.analysis: [DEBUG] RHBA-2015:1292 matched: keywords=crash
2016-04-14 15:34:17,635 fleure.analysis: [DEBUG] RHBA-2015:1293 matched: keywords=crash
2016-04-14 15:34:17,674 fleure.analysis: [DEBUG] RHBA-2015:1325 matched: keywords=crash
2016-04-14 15:34:17,707 fleure.analysis: [DEBUG] RHBA-2015:1339 matched: keywords=crash
2016-04-14 15:34:17,725 fleure.analysis: [DEBUG] RHBA-2015:1346 matched: keywords=crash
2016-04-14 15:34:17,758 fleure.analysis: [DEBUG] RHBA-2015:1380 matched: keywords=hang
2016-04-14 15:34:17,787 fleure.analysis: [DEBUG] RHBA-2015:1391 matched: keywords=crash
2016-04-14 15:34:17,814 fleure.analysis: [DEBUG] RHBA-2015:1407 matched: keywords=crash
2016-04-14 15:34:17,818 fleure.analysis: [DEBUG] RHBA-2015:1408 matched: keywords=hang
2016-04-14 15:34:17,846 fleure.analysis: [DEBUG] RHBA-2015:1441 matched: keywords=crash
2016-04-14 15:34:17,856 fleure.analysis: [DEBUG] RHBA-2015:1450 matched: keywords=crash
2016-04-14 15:34:17,867 fleure.analysis: [DEBUG] RHBA-2015:1465 matched: keywords=hang
2016-04-14 15:34:17,875 fleure.analysis: [DEBUG] RHBA-2015:1470 matched: keywords=hang
2016-04-14 15:34:17,878 fleure.analysis: [DEBUG] RHBA-2015:1609 matched: keywords=crash
2016-04-14 15:34:17,888 fleure.analysis: [DEBUG] RHBA-2015:1615 matched: keywords=crash
2016-04-14 15:34:17,894 fleure.analysis: [DEBUG] RHBA-2015:1711 matched: keywords=crash
2016-04-14 15:34:17,912 fleure.analysis: [DEBUG] RHBA-2015:1822 matched: keywords=hang, crash
2016-04-14 15:34:17,931 fleure.analysis: [DEBUG] RHBA-2015:1827 matched: keywords=panic, crash
2016-04-14 15:34:17,941 fleure.analysis: [DEBUG] RHBA-2015:1992 matched: keywords=panic, crash
2016-04-14 15:34:17,996 fleure.analysis: [DEBUG] RHBA-2016:0144 matched: keywords=crash
2016-04-14 15:34:18,009 fleure.analysis: [DEBUG] RHBA-2016:0150 matched: keywords=hang, panic, crash
2016-04-14 15:34:18,014 fleure.analysis: [DEBUG] RHBA-2016:0481 matched: keywords=crash
2016-04-14 15:34:24,551 fleure: [INFO] 5cbbb713 [20150101 ~ 20160411]: 220 個のエラータを発見、一覧を保存
2016-04-14 15:34:24,605 fleure: [INFO] 解析結果をアーカイブしました: /tmp/fleure-tests-xQ6DBw/report-5cbbb713-2016-04-14.zip
Timer unit: 1e-06 s

Total time: 0.001067 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_latest_errata_by_updates at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                           def list_latest_errata_by_updates(ers):
    29                                               """
    30                                               :param ers: A list of errata dict
    31                                               :return: A list of items in `ers` grouped by update names
    32                                               """
    33         6            6      1.0      0.6      ung = lambda e: sorted(set(u["name"] for u in e.get("updates", [])))
    34         6            5      0.8      0.5      return [xs[-1] for xs
    35        53         1056     19.9     99.0              in fleure.utils.sgroupby(ers, ung, itemgetter("issue_date"))]

Total time: 0.006832 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_from_errata at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           def list_updates_from_errata(ers):
    39                                               """
    40                                               :param ers: A list of errata dict
    41                                               """
    42         6         3619    603.2     53.0      ups = sorted(fleure.utils.uconcat(e.get("updates", []) for e in ers),
    43         6          141     23.5      2.1                   key=itemgetter("name"))
    44         6            3      0.5      0.0      return [sorted(g, cmp=fleure.rpmutils.pcmp, reverse=True)[0] for g
    45       226         3069     13.6     44.9              in fleure.utils.sgroupby(ups, itemgetter("name"))]

Total time: 1.88676 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: errata_of_keywords_g at line 74

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    74                                           def errata_of_keywords_g(ers, keywords=fleure.globals.ERRATA_KEYWORDS,
    75                                                                    pkeywords=None, stemming=True):
    76                                               """
    77                                               :param ers: A list of errata
    78                                               :param keywords: A tuple of keywords to filter 'important' RHBAs
    79                                               :param pkeywords: Similar to above but a dict gives the list per RPMs
    80                                               :param stemming: Strict matching of keywords with using NLTK stemmer
    81                                               :return:
    82                                                   A generator to yield errata of which description contains any of
    83                                                   given keywords
    84
    85                                               >>> ert0 = dict(advisory="RHSA-2015:XXX1",
    86                                               ...             description="system hangs, or crash...")
    87                                               >>> ert1 = dict(advisory="RHEA-2015:XXX2",
    88                                               ...             description="some enhancement and changes")
    89                                               >>> ers = list(errata_of_keywords_g([ert0], ("hang", ), stemming=True))
    90                                               >>> ert0 in ers
    91                                               True
    92                                               >>> ers[0]["keywords"]  # 'hangs' with stemming matches.
    93                                               ['hang']
    94                                               >>> ers = list(errata_of_keywords_g([ert0, ert1], ("hang", "crash"),
    95                                               ...                                 stemming=False))
    96                                               >>> ert0 in ers
    97                                               True
    98                                               >>> ers[0]["keywords"]  # 'hangs' w/o stemming does not match with 'hang'.
    99                                               ['crash']
   100                                               >>> ert1 in ers
   101                                               False
   102                                               """
   103         2            1      0.5      0.0      if stemming:
   104         2            5      2.5      0.0          _stem = _STEMMER.stem
   105
   106         2            2      1.0      0.0      if pkeywords is None:
   107                                                   pkeywords = fleure.globals.ERRATA_PKEYWORDS
   108
   109       496          403      0.8      0.0      for ert in ers:
   110       494        64622    130.8      3.4          tokens = set(nltk.wordpunct_tokenize(ert["description"]))
   111       494          377      0.8      0.0          if stemming:
   112       494      1798221   3640.1     95.3              tokens = set(_stem(w.lower()) for w in tokens)
   113
   114       494          870      1.8      0.0          kwds = _errata_keywords(ert.get("package_names", []), keywords,
   115       494         3349      6.8      0.2                                  pkeywords)
   116       494          670      1.4      0.0          matched = kwds & tokens
   117       494          325      0.7      0.0          if matched:
   118        94          625      6.6      0.0              LOG.debug(_("%s matched: keywords=%s"), ert["advisory"],
   119        94        16859    179.4      0.9                        ', '.join(matched))
   120        94          375      4.0      0.0              ert["keywords"] = list(matched)
   121        94           57      0.6      0.0              yield ert

Total time: 0.021881 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_update_errata_pairs at line 145

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   145                                           def list_update_errata_pairs(ers):
   146                                               """
   147                                               :param ers: A list of errata dict
   148                                               :return: A list of (update_name, [errata_advisory])
   149
   150                                               >>> ers = [dict(advisory="RHSA-2015:XXX1",
   151                                               ...             update_names=["kernel", "tzdata"]),
   152                                               ...        dict(advisory="RHSA-2014:XXX2",
   153                                               ...             update_names=["glibc", "tzdata"])
   154                                               ...        ]
   155                                               >>> list_update_errata_pairs(ers) == [
   156                                               ...     ('glibc', ['RHSA-2014:XXX2']),
   157                                               ...     ('kernel', ['RHSA-2015:XXX1']),
   158                                               ...     ('tzdata', ['RHSA-2015:XXX1', 'RHSA-2014:XXX2'])
   159                                               ... ]
   160                                               True
   161                                               """
   162        10           17      1.7      0.1      ues = fleure.utils.uconcat([(u, e["advisory"]) for u in e["update_names"]]
   163        10        19043   1904.3     87.0                                 for e in ers)
   164        10            9      0.9      0.0      return [(u, sorted((t[1] for t in g), reverse=True)) for u, g
   165       612         2812      4.6     12.9              in itertools.groupby(ues, itemgetter(0))]

Total time: 0.000409 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: list_updates_by_num_of_errata at line 168

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   168                                           def list_updates_by_num_of_errata(uess):
   169                                               """
   170                                               List number of specific type of errata for each package names.
   171
   172                                               :param uess: A list of (update, [errata_advisory]) pairs
   173                                               :return: [(package_name :: str, num_of_relevant_errata :: Int)]
   174
   175                                               >>> ers = [{'advisory': u'RHSA-2015:1623',
   176                                               ...         'update_names': ['kernel-headers', 'kernel']},
   177                                               ...        {'advisory': 'RHSA-2015:1513',
   178                                               ...         'update_names': ['bind-utils']},
   179                                               ...        {'advisory': 'RHSA-2015:1081',
   180                                               ...         'update_names': ['kernel-headers', 'kernel']}
   181                                               ...        ]
   182                                               >>> list_updates_by_num_of_errata(list_update_errata_pairs(ers))
   183                                               [('kernel', 2), ('kernel-headers', 2), ('bind-utils', 1)]
   184                                               >>>
   185                                               """
   186         8           10      1.2      2.4      return sorted(((u, len(es)) for u, es in uess), key=itemgetter(1),
   187         8          399     49.9     97.6                    reverse=True)

Total time: 0.009145 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhsa at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                           def analyze_rhsa(rhsa):
   191                                               """
   192                                               Compute and return statistics of RHSAs from some view points.
   193
   194                                               :param rhsa: A list of security errata (RHSA) dicts
   195                                               :return: RHSA analized data and metrics
   196                                               """
   197       187          146      0.8      1.6      cri_rhsa = [e for e in rhsa if e["severity"] == "Critical"]
   198       187          134      0.7      1.5      imp_rhsa = [e for e in rhsa if e["severity"] == "Important"]
   199
   200         2            1      0.5      0.0      rhsa_rate_by_sev = [("Critical", len(cri_rhsa)),
   201         2            2      1.0      0.0                          ("Important", len(imp_rhsa)),
   202         2            2      1.0      0.0                          ("Moderate",
   203       187           95      0.5      1.0                           len([e for e in rhsa
   204       185          127      0.7      1.4                                if e["severity"] == "Moderate"])),
   205         2            1      0.5      0.0                          ("Low",
   206       187          108      0.6      1.2                           len([e for e in rhsa
   207       185          123      0.7      1.3                                if e["severity"] == "Low"]))]
   208
   209         2         2931   1465.5     32.1      rhsa_ues = list_update_errata_pairs(rhsa)
   210         2            1      0.5      0.0      _ups_by_nes = lambda es: \
   211                                                   list_updates_by_num_of_errata(list_update_errata_pairs(es))
   212
   213         2            2      1.0      0.0      return {'list': rhsa,
   214         2            1      0.5      0.0              'list_critical': cri_rhsa,
   215         2            2      1.0      0.0              'list_important': imp_rhsa,
   216         2          136     68.0      1.5              'list_latest_critical': list_latest_errata_by_updates(cri_rhsa),
   217         2          516    258.0      5.6              'list_latest_important': list_latest_errata_by_updates(imp_rhsa),
   218         2          366    183.0      4.0              'list_critical_updates': list_updates_from_errata(cri_rhsa),
   219         2         3241   1620.5     35.4              'list_important_updates': list_updates_from_errata(imp_rhsa),
   220         2            2      1.0      0.0              'rate_by_sev': rhsa_rate_by_sev,
   221         2          129     64.5      1.4              'list_n_by_pnames': list_updates_by_num_of_errata(rhsa_ues),
   222         2          222    111.0      2.4              'list_n_cri_by_pnames': _ups_by_nes(cri_rhsa),
   223         2          856    428.0      9.4              'list_n_imp_by_pnames': _ups_by_nes(imp_rhsa),
   224         2            1      0.5      0.0              'list_by_packages': rhsa_ues}

Total time: 1.9179 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_rhba at line 227

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   227                                           def analyze_rhba(rhba, keywords=fleure.globals.ERRATA_KEYWORDS,
   228                                                            pkeywords=None, core_rpms=fleure.globals.CORE_RPMS):
   229                                               """
   230                                               Compute and return statistics of RHBAs from some view points.
   231
   232                                               :param rhba: A list of bug errata (RHBA) dicts
   233                                               :param keywords: A tuple of keywords to filter 'important' RHBAs
   234                                               :param pkeywords: Similar to above but a dict gives the list per RPMs
   235                                               :param core_rpms: Core RPMs to filter errata by them
   236                                               :return: RHSA analized data and metrics
   237                                               """
   238         2            1      0.5      0.0      kfn = lambda e: (len(e.get("keywords", [])), e["issue_date"],
   239                                                                e["update_names"])
   240         2            3      1.5      0.0      rhba_by_kwds = sorted(errata_of_keywords_g(rhba, keywords, pkeywords),
   241         2      1891727 945863.5     98.6                            key=kfn, reverse=True)
   242                                               rhba_of_core_rpms_by_kwds = \
   243         2            7      3.5      0.0          sorted(errata_of_rpms_g(rhba_by_kwds, core_rpms),
   244         2          614    307.0      0.0                 key=kfn, reverse=True)
   245         2            2      1.0      0.0      rhba_of_rpms = sorted(errata_of_rpms_g(rhba, core_rpms),
   246         2         3335   1667.5      0.2                            key=itemgetter("update_names"), reverse=True)
   247         2          481    240.5      0.0      latest_rhba_of_rpms = list_latest_errata_by_updates(rhba_of_rpms)
   248         2        18091   9045.5      0.9      rhba_ues = list_update_errata_pairs(rhba)
   249
   250         2            5      2.5      0.0      return {'list': rhba,
   251         2            3      1.5      0.0              'list_by_kwds': rhba_by_kwds,
   252         2            1      0.5      0.0              'list_of_core_rpms': rhba_of_rpms,
   253         2            2      1.0      0.0              'list_latests_of_core_rpms': latest_rhba_of_rpms,
   254         2            2      1.0      0.0              'list_by_kwds_of_core_rpms': rhba_of_core_rpms_by_kwds,
   255         2         3375   1687.5      0.2              'list_updates_by_kwds': list_updates_from_errata(rhba_by_kwds),
   256         2          247    123.5      0.0              'list_n_by_pnames': list_updates_by_num_of_errata(rhba_ues),
   257         2            2      1.0      0.0              'list_by_packages': rhba_ues}

Total time: 1.92996 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: analyze_errata at line 304

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   304                                           def analyze_errata(ers, score=fleure.globals.CVSS_MIN_SCORE,
   305                                                              keywords=fleure.globals.ERRATA_KEYWORDS,
   306                                                              pkeywords=None, core_rpms=fleure.globals.CORE_RPMS):
   307                                               """
   308                                               :param ers: A list of applicable errata sorted by severity
   309                                                   if it's RHSA and advisory in ascending sequence
   310                                               :param score: CVSS base metrics score
   311                                               :param keywords: A tuple of keywords to filter 'important' RHBAs
   312                                               :param pkeywords: Similar to above but a dict gives the list per RPMs
   313                                               :param core_rpms: Core RPMs to filter errata by them
   314                                               """
   315       740          685      0.9      0.0      rhsa = [e for e in ers if e["advisory"][2] == 'S']
   316       740          540      0.7      0.0      rhba = [e for e in ers if e["advisory"][2] == 'B']
   317       740          532      0.7      0.0      rhea = [e for e in ers if e["advisory"][2] == 'E']
   318
   319         2         9825   4912.5      0.5      rhsa_data = analyze_rhsa(rhsa)
   320         2            1      0.5      0.0      rhba_data = analyze_rhba(rhba, keywords=keywords, pkeywords=pkeywords,
   321         2      1917944 958972.0     99.4                               core_rpms=core_rpms)
   322         2            1      0.5      0.0      if score > 0:
   323                                                   rhba_by_score = list(higher_score_cve_errata_g(rhba, score))
   324                                                   us_of_rhba_by_score = list_updates_from_errata(rhba_by_score)
   325                                               else:
   326         2            1      0.5      0.0          rhsa_by_score = []
   327         2            0      0.0      0.0          rhba_by_score = []
   328         2            1      0.5      0.0          us_of_rhsa_by_score = []
   329         2            1      0.5      0.0          us_of_rhba_by_score = []
   330
   331         2            2      1.0      0.0      rhsa_data["list_higher_cvss_score"] = rhsa_by_score
   332         2            1      0.5      0.0      rhba_data["list_higher_cvss_score"] = rhba_by_score
   333         2            1      0.5      0.0      rhsa_data["list_higher_cvss_updates"] = us_of_rhsa_by_score
   334         2            2      1.0      0.0      rhba_data["list_higher_cvss_updates"] = us_of_rhba_by_score
   335
   336         2            1      0.5      0.0      return dict(rhsa=rhsa_data,
   337         2            1      0.5      0.0                  rhba=rhba_data,
   338         2            1      0.5      0.0                  rhea=dict(list=rhea,
   339         2          411    205.5      0.0                            list_by_packages=list_update_errata_pairs(rhea)),
   340         2            2      1.0      0.0                  rate_by_type=[("Security", len(rhsa)),
   341         2            2      1.0      0.0                                ("Bug", len(rhba)),
   342         2            3      1.5      0.0                                ("Enhancement", len(rhea))])

Total time: 0.001092 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/analysis.py
Function: mk_overview_dataset at line 357

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   357                                           def mk_overview_dataset(data, score=fleure.globals.CVSS_MIN_SCORE,
   358                                                                   keywords=fleure.globals.ERRATA_KEYWORDS,
   359                                                                   core_rpms=None, **kwargs):
   360                                               """
   361                                               :param data: RPMs, Update RPMs and various errata data summarized
   362                                               :param score: CVSS base metrics score limit
   363                                               :param keywords: A tuple of keywords to filter 'important' RHBAs
   364                                               :param core_rpms: Core RPMs to filter errata by them
   365
   366                                               :return: An instance of tablib.Dataset becomes a worksheet represents the
   367                                                   overview of analysys reuslts
   368                                               """
   369         2           12      6.0      1.1      rows = [[_("Critical or Important RHSAs (Security Errata)")],
   370         2            6      3.0      0.5              [_("# of Critical RHSAs"),
   371         2            8      4.0      0.7               len(data["errata"]["rhsa"]["list_critical"])],
   372         2            6      3.0      0.5              [_("# of Critical RHSAs (latests only)"),
   373         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_latest_critical"])],
   374         2            6      3.0      0.5              [_("# of Important RHSAs"),
   375         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_important"])],
   376         2            5      2.5      0.5              [_("# of Important RHSAs (latests only)"),
   377         2            4      2.0      0.4               len(data["errata"]["rhsa"]["list_latest_important"])],
   378         2            8      4.0      0.7              [_("Update RPMs by Critical or Important RHSAs at minimum")],
   379         2            4      2.0      0.4              [_("# of Update RPMs by Critical RHSAs at minimum"),
   380         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_critical_updates"])],
   381         2            5      2.5      0.5              [_("# of Update RPMs by Important RHSAs at minimum"),
   382         2            3      1.5      0.3               len(data["errata"]["rhsa"]["list_important_updates"])],
   383         2            2      1.0      0.2              [],
   384         2           17      8.5      1.6              [_("RHBAs (Bug Errata) by keywords: %s") % ", ".join(keywords)],
   385         2            6      3.0      0.5              [_("# of RHBAs by keywords"),
   386         2            4      2.0      0.4               len(data["errata"]["rhba"]["list_by_kwds"])],
   387         2            6      3.0      0.5              [_("# of Update RPMs by RHBAs by keywords at minimum"),
   388         2            6      3.0      0.5               len(data["errata"]["rhba"]["list_updates_by_kwds"])]]
   389
   390         2            2      1.0      0.2      if core_rpms is not None:
   391         2            2      1.0      0.2          rows += [[],
   392         2           12      6.0      1.1                   [_("RHBAs of core rpms: %s") % ", ".join(core_rpms)],
   393         2            6      3.0      0.5                   [_("# of RHBAs of core rpms (latests only)"),
   394         2            9      4.5      0.8                    len(data["errata"]["rhba"]["list_latests_of_core_rpms"])]]
   395
   396         2            2      1.0      0.2      if score > 0:
   397                                                   rows += [[],
   398                                                            [_("RHSAs and RHBAs by CVSS score")],
   399                                                            [_("# of RHSAs of CVSS Score >= %.1f") % score,
   400                                                             len(data["errata"]["rhsa"]["list_higher_cvss_score"])],
   401                                                            [_("# of Update RPMs by the above RHSAs at minimum"),
   402                                                             len(data["errata"]["rhsa"]["list_higher_cvss_updates"])],
   403                                                            [_("# of RHBAs of CVSS Score >= %.1f") % score,
   404                                                             len(data["errata"]["rhba"]["list_higher_cvss_score"])],
   405                                                            [_("# of Update RPMs by the above RHBAs at minimum"),
   406                                                             len(data["errata"]["rhba"]["list_higher_cvss_updates"])]]
   407
   408         2            0      0.0      0.0      rows += [[],
   409         2            8      4.0      0.7               [_("# of RHSAs"), len(data["errata"]["rhsa"]["list"])],
   410         2            5      2.5      0.5               [_("# of RHBAs"), len(data["errata"]["rhba"]["list"])],
   411         2            5      2.5      0.5               [_("# of RHEAs (Enhancement Errata)"),
   412         2            3      1.5      0.3                len(data["errata"]["rhea"]["list"])],
   413         2            8      4.0      0.7               [_("# of Update RPMs"), len(data["updates"]["list"])],
   414         2            8      4.0      0.7               [_("# of Installed RPMs"), len(data["installed"]["list"])],
   415         2            2      1.0      0.2               [],
   416         2            4      2.0      0.4               [_("Origin of Installed RPMs")],
   417         2            7      3.5      0.6               [_("# of Rebuilt RPMs"), len(data["installed"]["list_rebuilt"])],
   418         2            4      2.0      0.4               [_("# of Replaced RPMs"),
   419         2            3      1.5      0.3                len(data["installed"]["list_replaced"])],
   420         2            6      3.0      0.5               [_("# of RPMs from other vendors (non Red Hat)"),
   421         2            7      3.5      0.6                len(data["installed"]["list_from_others"])]]
   422
   423         2           10      5.0      0.9      headers = (_("Item"), _("Value"), _("Notes"))
   424         2          234    117.0     21.4      dataset = tablib.Dataset(headers=headers)
   425         2            9      4.5      0.8      dataset.title = _("Overview of analysis results")
   426
   427         2            2      1.0      0.2      mcols = len(headers)
   428        54           53      1.0      4.9      for row in rows:
   429        52           51      1.0      4.7          if row and len(row) == 1:  # Special case: separator
   430        10           60      6.0      5.5              dataset.append_separator(row[0])
   431                                                   else:
   432        42          452     10.8     41.4              dataset.append(padding_row(row, mcols))
   433
   434         2            1      0.5      0.1      return dataset

Total time: 0.049521 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/datasets.py
Function: make_dataset at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           def make_dataset(list_data, title=None, headers=None, lheaders=None):
   116                                               """
   117                                               :param list_data: List of data
   118                                               :param title: Dataset title to be used as worksheet's name
   119                                               :param headers: Dataset headers to be used as column headers, etc.
   120                                               :param lheaders: Localized version of `headers`
   121
   122                                               TODO: Which is better?
   123                                                   - tablib.Dataset(); [tablib.append(vals) for vals in list_data]
   124                                                   - tablib.Dataset(*list_data, header=...)
   125                                               """
   126                                               # .. note::
   127                                               #    We need to check title as valid worksheet name, length <= 31, etc.
   128                                               #    See also xlwt.Utils.valid_sheet_name.
   129        26           19      0.7      0.0      if headers is not None:
   130        26           11      0.4      0.0          tdata = [[_make_cell_data(val, h) for h in headers] for val in
   131     22328        44865      2.0     90.6                   list_data]
   132                                               else:
   133                                                   tdata = [val.values() for val in list_data]
   134
   135        26         4626    177.9      9.3      return tablib.Dataset(*tdata, title=title[:30], headers=lheaders)

Total time: 98.369 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/decorators.py
Function: decorated at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               @functools.wraps(fnc)
    40                                               def decorated(*args, **kwargs):
    41                                                   """Decorated one"""
    42         3     98369000 32789666.7    100.0          return fnc(*args, **kwargs)

Total time: 0.053718 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: archive_report at line 295

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   295                                           def archive_report(reportdir, output):
   296                                               """Archive analysis report.
   297
   298                                               :reportdir: Dir where generated report files exist
   299                                               :output: Output filename
   300                                               :return:
   301                                                   Absolute path of archive file made or None might indicates some
   302                                                   failures before/during making archive.
   303                                               """
   304         1            1      1.0      0.0      filenames = fleure.globals.REPORT_FILES
   305         1           27     27.0      0.1      if all(os.path.exists(os.path.join(reportdir, fn)) for fn in filenames):
   306         1        53471  53471.0     99.5          arcpath = fleure.archive.archive_report(reportdir, output)
   307         1          218    218.0      0.4          LOG.info(_("Archived results: %s"), arcpath)
   308         1            1      1.0      0.0          return arcpath
   309
   310                                               LOG.warn(_("Reprot files (%s) do not exist. Do no make a report "
   311                                                          "archives"), ", ".join(filenames))
   312                                               return None

Total time: 98.423 s
File: /home/ssato/repos/public/github.com/ssato/fleure.git/fleure/main.py
Function: main at line 315

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   315                                           def main(root_or_arc_path, hid=None, verbosity=0, **kwargs):
   316                                               """
   317                                               :param root_or_arc_path:
   318                                                   Path to the root dir of RPM DB files or Archive (tar.xz, tar.gz, zip,
   319                                                   etc.) of RPM DB files. Path might be a relative path from current dir.
   320                                               :param hid:
   321                                                   Some identification info of the target host where original RPM DB data
   322                                                   was collected.
   323                                               :param verbosity: Verbosity level: 0 (default), 1 (verbose), 2 (debug)
   324                                               :param kwargs:
   325                                                   Extra keyword arguments other than `root_or_arc_path` passed to make an
   326                                                   instance of :class:`fleure.config.Host`
   327
   328                                               :return: Workdir where results exist or path to archive of results
   329                                               """
   330         1           16     16.0      0.0      set_loglevel(verbosity)
   331         1      5392504 5392504.0      5.5      host = configure(root_or_arc_path, hid, **kwargs)
   332         1            1      1.0      0.0      if host is None:
   333                                                   LOG.error(_("Failed to configure the host: root=%s"),
   334                                                             root_or_arc_path)
   335                                                   return None
   336
   337         1     71309437 71309437.0     72.5      prepare(host)
   338
   339         1            6      6.0      0.0      if host.available:
   340         1          206    206.0      0.0          LOG.info(_("Anaylize the host: %s"), host.hid)
   341         1     21667081 21667081.0     22.0          analyze(host)
   342
   343         1            3      3.0      0.0      if kwargs.get("archive", False):
   344         1            8      8.0      0.0          outname = "report-%s-%s.zip" % (host.hid, fleure.globals.TODAY)
   345         1        53733  53733.0      0.1          return archive_report(host.workdir, outname)
   346                                               else:
   347                                                   return host.workdir

ssato@x1carbon%                                               ~/repos/public/github.com/ssato/fleure.git
